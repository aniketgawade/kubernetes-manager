#
# Autogenerated by Sandesh Compiler (1.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

from pysandesh.Thrift import TType, TMessageType, TException

from pysandesh.transport import TTransport
from pysandesh.protocol import TBinaryProtocol, TProtocol
try:
  from pysandesh.protocol import fastbinary
except:
  fastbinary = None

import cStringIO
import uuid
import netaddr
from sys import getsizeof
from itertools import chain
import bottle
from pysandesh import sandesh_base
from pysandesh.sandesh_http import SandeshHttp
from pysandesh.sandesh_uve import SandeshUVETypeMaps
from pysandesh.util import UTCTimestampUsec, UTCTimestampUsecToString
from pysandesh import util
from pysandesh.gen_py.sandesh.constants import *



class PodInstance(object):
  """
  Attributes:
   - uuid
   - name
   - name_space
   - labels
   - nodename
   - ip
   - phase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'name_space', None, None, ), # 3
    (4, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'nodename', None, None, ), # 5
    (6, TType.STRING, 'ip', None, None, ), # 6
    (7, TType.STRING, 'phase', None, None, ), # 7
  )

  def __init__(self, uuid=None, name=None, name_space=None, labels=None, nodename=None, ip=None, phase=None,):
    self.uuid = uuid
    self.name = name
    self.name_space = name_space
    self.labels = labels
    self.nodename = nodename
    self.ip = ip
    self.phase = phase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.name_space) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i4 in xrange(_size0):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key5) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val6) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key5] = _val6
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.nodename) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.phase) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      annotations['link'] = 'VirtualMachineDatabaseList'
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name_space is not None:
      annotations = {}
      if oprot.writeFieldBegin('name_space', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.name_space) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter7,viter8 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter7) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter8) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nodename is not None:
      annotations = {}
      if oprot.writeFieldBegin('nodename', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.nodename) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('ip', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.phase is not None:
      annotations = {}
      if oprot.writeFieldBegin('phase', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.phase) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.name_space is not None:
      log_str.write('name_space = ')
      log_str.write(self.name_space)
      log_str.write('  ')
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter9,viter10 in self.labels.iteritems():
        log_str.write(kiter9)
        log_str.write(' : ')
        log_str.write(viter10)
      log_str.write(' }')
      log_str.write('  ')
    if self.nodename is not None:
      log_str.write('nodename = ')
      log_str.write(self.nodename)
      log_str.write('  ')
    if self.ip is not None:
      log_str.write('ip = ')
      log_str.write(self.ip)
      log_str.write('  ')
    if self.phase is not None:
      log_str.write('phase = ')
      log_str.write(self.phase)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.name_space is not None:
      size += getsizeof(self.name_space)
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    if self.nodename is not None:
      size += getsizeof(self.nodename)
    if self.ip is not None:
      size += getsizeof(self.ip)
    if self.phase is not None:
      size += getsizeof(self.phase)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NamespaceInstance(object):
  """
  Attributes:
   - uuid
   - name
   - phase
   - isolated
   - labels
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'phase', None, None, ), # 3
    (4, TType.BOOL, 'isolated', None, None, ), # 4
    (5, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 5
  )

  def __init__(self, uuid=None, name=None, phase=None, isolated=None, labels=None,):
    self.uuid = uuid
    self.name = name
    self.phase = phase
    self.isolated = isolated
    self.labels = labels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.phase) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          (length, self.isolated) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype12, _vtype13, _size11 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i15 in xrange(_size11):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key16) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val17) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key16] = _val17
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.phase is not None:
      annotations = {}
      if oprot.writeFieldBegin('phase', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.phase) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.isolated is not None:
      annotations = {}
      if oprot.writeFieldBegin('isolated', TType.BOOL, 4, annotations) < 0: return -1
      if oprot.writeBool(self.isolated) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 5, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter18,viter19 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter18) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter19) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.phase is not None:
      log_str.write('phase = ')
      log_str.write(self.phase)
      log_str.write('  ')
    if self.isolated is not None:
      log_str.write('isolated = ')
      if self.isolated:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter20,viter21 in self.labels.iteritems():
        log_str.write(kiter20)
        log_str.write(' : ')
        log_str.write(viter21)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.phase is not None:
      size += getsizeof(self.phase)
    if self.isolated is not None:
      size += getsizeof(self.isolated)
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceInstance(object):
  """
  Attributes:
   - uuid
   - name
   - name_space
   - labels
   - cluster_ip
   - service_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'name_space', None, None, ), # 3
    (4, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'cluster_ip', None, None, ), # 5
    (6, TType.STRING, 'service_type', None, None, ), # 6
  )

  def __init__(self, uuid=None, name=None, name_space=None, labels=None, cluster_ip=None, service_type=None,):
    self.uuid = uuid
    self.name = name
    self.name_space = name_space
    self.labels = labels
    self.cluster_ip = cluster_ip
    self.service_type = service_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.name_space) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype23, _vtype24, _size22 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i26 in xrange(_size22):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key27) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val28) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key27] = _val28
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.cluster_ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.service_type) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerDatabaseList'
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name_space is not None:
      annotations = {}
      if oprot.writeFieldBegin('name_space', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.name_space) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter29,viter30 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter29) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter30) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.cluster_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('cluster_ip', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.cluster_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.service_type is not None:
      annotations = {}
      if oprot.writeFieldBegin('service_type', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.service_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.name_space is not None:
      log_str.write('name_space = ')
      log_str.write(self.name_space)
      log_str.write('  ')
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter31,viter32 in self.labels.iteritems():
        log_str.write(kiter31)
        log_str.write(' : ')
        log_str.write(viter32)
      log_str.write(' }')
      log_str.write('  ')
    if self.cluster_ip is not None:
      log_str.write('cluster_ip = ')
      log_str.write(self.cluster_ip)
      log_str.write('  ')
    if self.service_type is not None:
      log_str.write('service_type = ')
      log_str.write(self.service_type)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.name_space is not None:
      size += getsizeof(self.name_space)
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    if self.cluster_ip is not None:
      size += getsizeof(self.cluster_ip)
    if self.service_type is not None:
      size += getsizeof(self.service_type)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyLabels(object):
  """
  Attributes:
   - labels
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, labels=None,):
    self.labels = labels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype34, _vtype35, _size33 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i37 in xrange(_size33):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key38) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val39) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key38] = _val39
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 1, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter40,viter41 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter40) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter41) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter42,viter43 in self.labels.iteritems():
        log_str.write(kiter42)
        log_str.write(' : ')
        log_str.write(viter43)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyLabelSelectors(object):
  """
  Attributes:
   - matchLabels
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'matchLabels', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, matchLabels=None,):
    self.matchLabels = matchLabels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.matchLabels = {}
          (length, _ktype45, _vtype46, _size44 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i48 in xrange(_size44):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key49) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val50) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.matchLabels[_key49] = _val50
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.matchLabels is not None:
      annotations = {}
      if oprot.writeFieldBegin('matchLabels', TType.MAP, 1, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.matchLabels)) < 0: return -1
      for kiter51,viter52 in self.matchLabels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter51) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter52) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.matchLabels is not None:
      log_str.write('matchLabels = ')
      log_str.write('{ ')
      for kiter53,viter54 in self.matchLabels.iteritems():
        log_str.write(kiter53)
        log_str.write(' : ')
        log_str.write(viter54)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.matchLabels is not None:
      size += getsizeof(self.matchLabels)
      size += sum(map(getsizeof, chain.from_iterable(self.matchLabels.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyIpBlock(object):
  """
  Attributes:
   - cidr
   - except_cidr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cidr', None, None, ), # 1
    (2, TType.LIST, 'except_cidr', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, cidr=None, except_cidr=None,):
    self.cidr = cidr
    self.except_cidr = except_cidr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.cidr) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.except_cidr = []
          (length, _etype58, _size55) = iprot.readListBegin()
          read_cnt += length
          for _i59 in xrange(_size55):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem60) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.except_cidr.append(_elem60)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.cidr is not None:
      annotations = {}
      if oprot.writeFieldBegin('cidr', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.cidr) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.except_cidr is not None:
      annotations = {}
      if oprot.writeFieldBegin('except_cidr', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.except_cidr)) < 0: return -1
      for iter61 in self.except_cidr:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter61) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.cidr is not None:
      log_str.write('cidr = ')
      log_str.write(self.cidr)
      log_str.write('  ')
    if self.except_cidr is not None:
      log_str.write('except_cidr = ')
      log_str.write('[ ')
      for iter62 in self.except_cidr:
        log_str.write(iter62)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.cidr is not None:
      size += getsizeof(self.cidr)
    if self.except_cidr is not None:
      size += getsizeof(self.except_cidr)
      size += sum(map(getsizeof, self.except_cidr))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyFromRules(object):
  """
  Attributes:
   - podSelector
   - namespaceSelector
   - ipBlock
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'podSelector', (NetworkPolicyLabelSelectors, NetworkPolicyLabelSelectors.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'namespaceSelector', (NetworkPolicyLabelSelectors, NetworkPolicyLabelSelectors.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ipBlock', (NetworkPolicyIpBlock, NetworkPolicyIpBlock.thrift_spec), None, ), # 3
  )

  def __init__(self, podSelector=None, namespaceSelector=None, ipBlock=None,):
    self.podSelector = podSelector
    self.namespaceSelector = namespaceSelector
    self.ipBlock = ipBlock

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.podSelector = NetworkPolicyLabelSelectors()
          read_cnt += self.podSelector.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.namespaceSelector = NetworkPolicyLabelSelectors()
          read_cnt += self.namespaceSelector.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ipBlock = NetworkPolicyIpBlock()
          read_cnt += self.ipBlock.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.podSelector is not None:
      annotations = {}
      if oprot.writeFieldBegin('podSelector', TType.STRUCT, 1, annotations) < 0: return -1
      if self.podSelector.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.namespaceSelector is not None:
      annotations = {}
      if oprot.writeFieldBegin('namespaceSelector', TType.STRUCT, 2, annotations) < 0: return -1
      if self.namespaceSelector.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ipBlock is not None:
      annotations = {}
      if oprot.writeFieldBegin('ipBlock', TType.STRUCT, 3, annotations) < 0: return -1
      if self.ipBlock.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.podSelector is not None:
      log_str.write('podSelector = ')
      log_str.write('<<  ')
      log_str.write(self.podSelector.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.namespaceSelector is not None:
      log_str.write('namespaceSelector = ')
      log_str.write('<<  ')
      log_str.write(self.namespaceSelector.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.ipBlock is not None:
      log_str.write('ipBlock = ')
      log_str.write('<<  ')
      log_str.write(self.ipBlock.log())
      log_str.write('>>')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.podSelector is not None:
      size += getsizeof(self.podSelector)
    if self.namespaceSelector is not None:
      size += getsizeof(self.namespaceSelector)
    if self.ipBlock is not None:
      size += getsizeof(self.ipBlock)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyToRules(object):
  """
  Attributes:
   - ipBlock
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ipBlock', (NetworkPolicyIpBlock, NetworkPolicyIpBlock.thrift_spec), None, ), # 1
  )

  def __init__(self, ipBlock=None,):
    self.ipBlock = ipBlock

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ipBlock = NetworkPolicyIpBlock()
          read_cnt += self.ipBlock.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.ipBlock is not None:
      annotations = {}
      if oprot.writeFieldBegin('ipBlock', TType.STRUCT, 1, annotations) < 0: return -1
      if self.ipBlock.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.ipBlock is not None:
      log_str.write('ipBlock = ')
      log_str.write('<<  ')
      log_str.write(self.ipBlock.log())
      log_str.write('>>')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.ipBlock is not None:
      size += getsizeof(self.ipBlock)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyPort(object):
  """
  Attributes:
   - port
   - protocol
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'port', None, None, ), # 1
    (2, TType.STRING, 'protocol', None, None, ), # 2
  )

  def __init__(self, port=None, protocol=None,):
    self.port = port
    self.protocol = protocol

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.port) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.protocol) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.port is not None:
      annotations = {}
      if oprot.writeFieldBegin('port', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.port) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.protocol is not None:
      annotations = {}
      if oprot.writeFieldBegin('protocol', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.protocol) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.port is not None:
      log_str.write('port = ')
      log_str.write(self.port)
      log_str.write('  ')
    if self.protocol is not None:
      log_str.write('protocol = ')
      log_str.write(self.protocol)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.port is not None:
      size += getsizeof(self.port)
    if self.protocol is not None:
      size += getsizeof(self.protocol)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyIngressPolicy(object):
  """
  Attributes:
   - fromPolicy
   - ports
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fromPolicy', (TType.STRUCT,(NetworkPolicyFromRules, NetworkPolicyFromRules.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'ports', (TType.STRUCT,(NetworkPolicyPort, NetworkPolicyPort.thrift_spec)), None, ), # 2
  )

  def __init__(self, fromPolicy=None, ports=None,):
    self.fromPolicy = fromPolicy
    self.ports = ports

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fromPolicy = []
          (length, _etype66, _size63) = iprot.readListBegin()
          read_cnt += length
          for _i67 in xrange(_size63):
            _elem68 = NetworkPolicyFromRules()
            read_cnt += _elem68.read(iprot)
            self.fromPolicy.append(_elem68)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ports = []
          (length, _etype72, _size69) = iprot.readListBegin()
          read_cnt += length
          for _i73 in xrange(_size69):
            _elem74 = NetworkPolicyPort()
            read_cnt += _elem74.read(iprot)
            self.ports.append(_elem74)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.fromPolicy is not None:
      annotations = {}
      if oprot.writeFieldBegin('fromPolicy', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.fromPolicy)) < 0: return -1
      for iter75 in self.fromPolicy:
        if iter75.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ports is not None:
      annotations = {}
      if oprot.writeFieldBegin('ports', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.ports)) < 0: return -1
      for iter76 in self.ports:
        if iter76.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.fromPolicy is not None:
      log_str.write('fromPolicy = ')
      log_str.write('[ ')
      for iter77 in self.fromPolicy:
        log_str.write('<<  ')
        log_str.write(iter77.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.ports is not None:
      log_str.write('ports = ')
      log_str.write('[ ')
      for iter78 in self.ports:
        log_str.write('<<  ')
        log_str.write(iter78.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.fromPolicy is not None:
      size += getsizeof(self.fromPolicy)
      size += sum(map(getsizeof, self.fromPolicy))
    if self.ports is not None:
      size += getsizeof(self.ports)
      size += sum(map(getsizeof, self.ports))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyEgressPolicy(object):
  """
  Attributes:
   - toPolicy
   - ports
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'toPolicy', (TType.STRUCT,(NetworkPolicyToRules, NetworkPolicyToRules.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'ports', (TType.STRUCT,(NetworkPolicyPort, NetworkPolicyPort.thrift_spec)), None, ), # 2
  )

  def __init__(self, toPolicy=None, ports=None,):
    self.toPolicy = toPolicy
    self.ports = ports

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.toPolicy = []
          (length, _etype82, _size79) = iprot.readListBegin()
          read_cnt += length
          for _i83 in xrange(_size79):
            _elem84 = NetworkPolicyToRules()
            read_cnt += _elem84.read(iprot)
            self.toPolicy.append(_elem84)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ports = []
          (length, _etype88, _size85) = iprot.readListBegin()
          read_cnt += length
          for _i89 in xrange(_size85):
            _elem90 = NetworkPolicyPort()
            read_cnt += _elem90.read(iprot)
            self.ports.append(_elem90)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.toPolicy is not None:
      annotations = {}
      if oprot.writeFieldBegin('toPolicy', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.toPolicy)) < 0: return -1
      for iter91 in self.toPolicy:
        if iter91.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ports is not None:
      annotations = {}
      if oprot.writeFieldBegin('ports', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.ports)) < 0: return -1
      for iter92 in self.ports:
        if iter92.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.toPolicy is not None:
      log_str.write('toPolicy = ')
      log_str.write('[ ')
      for iter93 in self.toPolicy:
        log_str.write('<<  ')
        log_str.write(iter93.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.ports is not None:
      log_str.write('ports = ')
      log_str.write('[ ')
      for iter94 in self.ports:
        log_str.write('<<  ')
        log_str.write(iter94.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.toPolicy is not None:
      size += getsizeof(self.toPolicy)
      size += sum(map(getsizeof, self.toPolicy))
    if self.ports is not None:
      size += getsizeof(self.ports)
      size += sum(map(getsizeof, self.ports))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicySpec(object):
  """
  Attributes:
   - ingress
   - egress
   - podSelector
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ingress', (TType.STRUCT,(NetworkPolicyIngressPolicy, NetworkPolicyIngressPolicy.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'egress', (TType.STRUCT,(NetworkPolicyEgressPolicy, NetworkPolicyEgressPolicy.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'podSelector', (NetworkPolicyLabelSelectors, NetworkPolicyLabelSelectors.thrift_spec), None, ), # 3
  )

  def __init__(self, ingress=None, egress=None, podSelector=None,):
    self.ingress = ingress
    self.egress = egress
    self.podSelector = podSelector

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ingress = []
          (length, _etype98, _size95) = iprot.readListBegin()
          read_cnt += length
          for _i99 in xrange(_size95):
            _elem100 = NetworkPolicyIngressPolicy()
            read_cnt += _elem100.read(iprot)
            self.ingress.append(_elem100)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.egress = []
          (length, _etype104, _size101) = iprot.readListBegin()
          read_cnt += length
          for _i105 in xrange(_size101):
            _elem106 = NetworkPolicyEgressPolicy()
            read_cnt += _elem106.read(iprot)
            self.egress.append(_elem106)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.podSelector = NetworkPolicyLabelSelectors()
          read_cnt += self.podSelector.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.ingress is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.ingress)) < 0: return -1
      for iter107 in self.ingress:
        if iter107.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.egress is not None:
      annotations = {}
      if oprot.writeFieldBegin('egress', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.egress)) < 0: return -1
      for iter108 in self.egress:
        if iter108.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.podSelector is not None:
      annotations = {}
      if oprot.writeFieldBegin('podSelector', TType.STRUCT, 3, annotations) < 0: return -1
      if self.podSelector.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.ingress is not None:
      log_str.write('ingress = ')
      log_str.write('[ ')
      for iter109 in self.ingress:
        log_str.write('<<  ')
        log_str.write(iter109.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.egress is not None:
      log_str.write('egress = ')
      log_str.write('[ ')
      for iter110 in self.egress:
        log_str.write('<<  ')
        log_str.write(iter110.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.podSelector is not None:
      log_str.write('podSelector = ')
      log_str.write('<<  ')
      log_str.write(self.podSelector.log())
      log_str.write('>>')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.ingress is not None:
      size += getsizeof(self.ingress)
      size += sum(map(getsizeof, self.ingress))
    if self.egress is not None:
      size += getsizeof(self.egress)
      size += sum(map(getsizeof, self.egress))
    if self.podSelector is not None:
      size += getsizeof(self.podSelector)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyInstance(object):
  """
  Attributes:
   - uuid
   - name
   - name_space
   - spec
   - vnc_firewall_policy_fqname
   - spec_string
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'name_space', None, None, ), # 3
    (4, TType.STRUCT, 'spec', (NetworkPolicySpec, NetworkPolicySpec.thrift_spec), None, ), # 4
    (5, TType.STRING, 'vnc_firewall_policy_fqname', None, None, ), # 5
    (6, TType.STRING, 'spec_string', None, None, ), # 6
  )

  def __init__(self, uuid=None, name=None, name_space=None, spec=None, vnc_firewall_policy_fqname=None, spec_string=None,):
    self.uuid = uuid
    self.name = name
    self.name_space = name_space
    self.spec = spec
    self.vnc_firewall_policy_fqname = vnc_firewall_policy_fqname
    self.spec_string = spec_string

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.name_space) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.spec = NetworkPolicySpec()
          read_cnt += self.spec.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.vnc_firewall_policy_fqname) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.spec_string) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name_space is not None:
      annotations = {}
      if oprot.writeFieldBegin('name_space', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.name_space) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.spec is not None:
      annotations = {}
      if oprot.writeFieldBegin('spec', TType.STRUCT, 4, annotations) < 0: return -1
      if self.spec.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vnc_firewall_policy_fqname is not None:
      annotations = {}
      if oprot.writeFieldBegin('vnc_firewall_policy_fqname', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.vnc_firewall_policy_fqname) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.spec_string is not None:
      annotations = {}
      if oprot.writeFieldBegin('spec_string', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.spec_string) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.name_space is not None:
      log_str.write('name_space = ')
      log_str.write(self.name_space)
      log_str.write('  ')
    if self.spec is not None:
      log_str.write('spec = ')
      log_str.write('<<  ')
      log_str.write(self.spec.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.vnc_firewall_policy_fqname is not None:
      log_str.write('vnc_firewall_policy_fqname = ')
      log_str.write(self.vnc_firewall_policy_fqname)
      log_str.write('  ')
    if self.spec_string is not None:
      log_str.write('spec_string = ')
      log_str.write(self.spec_string)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.name_space is not None:
      size += getsizeof(self.name_space)
    if self.spec is not None:
      size += getsizeof(self.spec)
    if self.vnc_firewall_policy_fqname is not None:
      size += getsizeof(self.vnc_firewall_policy_fqname)
    if self.spec_string is not None:
      size += getsizeof(self.spec_string)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressLabels(object):
  """
  Attributes:
   - labels
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, labels=None,):
    self.labels = labels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype112, _vtype113, _size111 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i115 in xrange(_size111):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key116) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val117) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key116] = _val117
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 1, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter118,viter119 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter118) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter119) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter120,viter121 in self.labels.iteritems():
        log_str.write(kiter120)
        log_str.write(' : ')
        log_str.write(viter121)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressBackend(object):
  """
  Attributes:
   - name
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'port', None, None, ), # 2
  )

  def __init__(self, name=None, port=None,):
    self.name = name
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.port) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.port is not None:
      annotations = {}
      if oprot.writeFieldBegin('port', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.port) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.port is not None:
      log_str.write('port = ')
      log_str.write(self.port)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.name is not None:
      size += getsizeof(self.name)
    if self.port is not None:
      size += getsizeof(self.port)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressRuleProtoPath(object):
  """
  Attributes:
   - backend
   - path
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'backend', (IngressBackend, IngressBackend.thrift_spec), None, ), # 1
    (2, TType.STRING, 'path', None, None, ), # 2
  )

  def __init__(self, backend=None, path=None,):
    self.backend = backend
    self.path = path

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.backend = IngressBackend()
          read_cnt += self.backend.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.path) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.backend is not None:
      annotations = {}
      if oprot.writeFieldBegin('backend', TType.STRUCT, 1, annotations) < 0: return -1
      if self.backend.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.path is not None:
      annotations = {}
      if oprot.writeFieldBegin('path', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.path) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.backend is not None:
      log_str.write('backend = ')
      log_str.write('<<  ')
      log_str.write(self.backend.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.path is not None:
      log_str.write('path = ')
      log_str.write(self.path)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.backend is not None:
      size += getsizeof(self.backend)
    if self.path is not None:
      size += getsizeof(self.path)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressProtoSpec(object):
  """
  Attributes:
   - proto
   - paths
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'proto', None, None, ), # 1
    (2, TType.LIST, 'paths', (TType.STRUCT,(IngressRuleProtoPath, IngressRuleProtoPath.thrift_spec)), None, ), # 2
  )

  def __init__(self, proto=None, paths=None,):
    self.proto = proto
    self.paths = paths

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.proto) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.paths = []
          (length, _etype125, _size122) = iprot.readListBegin()
          read_cnt += length
          for _i126 in xrange(_size122):
            _elem127 = IngressRuleProtoPath()
            read_cnt += _elem127.read(iprot)
            self.paths.append(_elem127)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.proto is not None:
      annotations = {}
      if oprot.writeFieldBegin('proto', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.proto) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.paths is not None:
      annotations = {}
      if oprot.writeFieldBegin('paths', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.paths)) < 0: return -1
      for iter128 in self.paths:
        if iter128.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.proto is not None:
      log_str.write('proto = ')
      log_str.write(self.proto)
      log_str.write('  ')
    if self.paths is not None:
      log_str.write('paths = ')
      log_str.write('[ ')
      for iter129 in self.paths:
        log_str.write('<<  ')
        log_str.write(iter129.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.proto is not None:
      size += getsizeof(self.proto)
    if self.paths is not None:
      size += getsizeof(self.paths)
      size += sum(map(getsizeof, self.paths))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressRule(object):
  """
  Attributes:
   - host
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'host', None, None, ), # 1
    (2, TType.LIST, 'spec', (TType.STRUCT,(IngressProtoSpec, IngressProtoSpec.thrift_spec)), None, ), # 2
  )

  def __init__(self, host=None, spec=None,):
    self.host = host
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.host) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.spec = []
          (length, _etype133, _size130) = iprot.readListBegin()
          read_cnt += length
          for _i134 in xrange(_size130):
            _elem135 = IngressProtoSpec()
            read_cnt += _elem135.read(iprot)
            self.spec.append(_elem135)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.host is not None:
      annotations = {}
      if oprot.writeFieldBegin('host', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.host) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.spec is not None:
      annotations = {}
      if oprot.writeFieldBegin('spec', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.spec)) < 0: return -1
      for iter136 in self.spec:
        if iter136.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.host is not None:
      log_str.write('host = ')
      log_str.write(self.host)
      log_str.write('  ')
    if self.spec is not None:
      log_str.write('spec = ')
      log_str.write('[ ')
      for iter137 in self.spec:
        log_str.write('<<  ')
        log_str.write(iter137.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.host is not None:
      size += getsizeof(self.host)
    if self.spec is not None:
      size += getsizeof(self.spec)
      size += sum(map(getsizeof, self.spec))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressInstance(object):
  """
  Attributes:
   - uuid
   - name
   - name_space
   - labels
   - default_backend
   - rules
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'name_space', None, None, ), # 3
    (4, TType.MAP, 'labels', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.STRUCT, 'default_backend', (IngressBackend, IngressBackend.thrift_spec), None, ), # 5
    (6, TType.LIST, 'rules', (TType.STRUCT,(IngressRule, IngressRule.thrift_spec)), None, ), # 6
  )

  def __init__(self, uuid=None, name=None, name_space=None, labels=None, default_backend=None, rules=None,):
    self.uuid = uuid
    self.name = name
    self.name_space = name_space
    self.labels = labels
    self.default_backend = default_backend
    self.rules = rules

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.name_space) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.labels = {}
          (length, _ktype139, _vtype140, _size138 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i142 in xrange(_size138):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key143) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val144) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.labels[_key143] = _val144
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.default_backend = IngressBackend()
          read_cnt += self.default_backend.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.rules = []
          (length, _etype148, _size145) = iprot.readListBegin()
          read_cnt += length
          for _i149 in xrange(_size145):
            _elem150 = IngressRule()
            read_cnt += _elem150.read(iprot)
            self.rules.append(_elem150)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerDatabaseList'
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name_space is not None:
      annotations = {}
      if oprot.writeFieldBegin('name_space', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.name_space) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('labels', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.labels)) < 0: return -1
      for kiter151,viter152 in self.labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter151) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter152) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.default_backend is not None:
      annotations = {}
      if oprot.writeFieldBegin('default_backend', TType.STRUCT, 5, annotations) < 0: return -1
      if self.default_backend.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rules is not None:
      annotations = {}
      if oprot.writeFieldBegin('rules', TType.LIST, 6, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.rules)) < 0: return -1
      for iter153 in self.rules:
        if iter153.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.name_space is not None:
      log_str.write('name_space = ')
      log_str.write(self.name_space)
      log_str.write('  ')
    if self.labels is not None:
      log_str.write('labels = ')
      log_str.write('{ ')
      for kiter154,viter155 in self.labels.iteritems():
        log_str.write(kiter154)
        log_str.write(' : ')
        log_str.write(viter155)
      log_str.write(' }')
      log_str.write('  ')
    if self.default_backend is not None:
      log_str.write('default_backend = ')
      log_str.write('<<  ')
      log_str.write(self.default_backend.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.rules is not None:
      log_str.write('rules = ')
      log_str.write('[ ')
      for iter156 in self.rules:
        log_str.write('<<  ')
        log_str.write(iter156.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.name_space is not None:
      size += getsizeof(self.name_space)
    if self.labels is not None:
      size += getsizeof(self.labels)
      size += sum(map(getsizeof, chain.from_iterable(self.labels.iteritems())))
    if self.default_backend is not None:
      size += getsizeof(self.default_backend)
    if self.rules is not None:
      size += getsizeof(self.rules)
      size += sum(map(getsizeof, self.rules))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FIPUuid(object):
  """
  Attributes:
   - fip_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fip_uuid', None, None, ), # 1
  )

  def __init__(self, fip_uuid=None,):
    self.fip_uuid = fip_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.fip_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.fip_uuid is not None:
      annotations = {}
      annotations['link'] = 'FloatingIpDatabaseList'
      if oprot.writeFieldBegin('fip_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.fip_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.fip_uuid is not None:
      log_str.write('fip_uuid = ')
      log_str.write(self.fip_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.fip_uuid is not None:
      size += getsizeof(self.fip_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FIPPoolUuid(object):
  """
  Attributes:
   - fip_pool_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fip_pool_uuid', None, None, ), # 1
  )

  def __init__(self, fip_pool_uuid=None,):
    self.fip_pool_uuid = fip_pool_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.fip_pool_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.fip_pool_uuid is not None:
      annotations = {}
      annotations['link'] = 'FloatingIpPoolDatabaseList'
      if oprot.writeFieldBegin('fip_pool_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.fip_pool_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.fip_pool_uuid is not None:
      log_str.write('fip_pool_uuid = ')
      log_str.write(self.fip_pool_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.fip_pool_uuid is not None:
      size += getsizeof(self.fip_pool_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IIPUuid(object):
  """
  Attributes:
   - iip_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'iip_uuid', None, None, ), # 1
  )

  def __init__(self, iip_uuid=None,):
    self.iip_uuid = iip_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.iip_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.iip_uuid is not None:
      annotations = {}
      annotations['link'] = 'InstanceIpDatabaseList'
      if oprot.writeFieldBegin('iip_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.iip_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.iip_uuid is not None:
      log_str.write('iip_uuid = ')
      log_str.write(self.iip_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.iip_uuid is not None:
      size += getsizeof(self.iip_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LbListenerUuid(object):
  """
  Attributes:
   - lb_listener_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lb_listener_uuid', None, None, ), # 1
  )

  def __init__(self, lb_listener_uuid=None,):
    self.lb_listener_uuid = lb_listener_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.lb_listener_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.lb_listener_uuid is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerListenerDatabaseList'
      if oprot.writeFieldBegin('lb_listener_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.lb_listener_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.lb_listener_uuid is not None:
      log_str.write('lb_listener_uuid = ')
      log_str.write(self.lb_listener_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.lb_listener_uuid is not None:
      size += getsizeof(self.lb_listener_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NIPAMUuid(object):
  """
  Attributes:
   - net_ipam_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'net_ipam_uuid', None, None, ), # 1
  )

  def __init__(self, net_ipam_uuid=None,):
    self.net_ipam_uuid = net_ipam_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.net_ipam_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.net_ipam_uuid is not None:
      annotations = {}
      annotations['link'] = 'NetworkIpamDatabaseList'
      if oprot.writeFieldBegin('net_ipam_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.net_ipam_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.net_ipam_uuid is not None:
      log_str.write('net_ipam_uuid = ')
      log_str.write(self.net_ipam_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.net_ipam_uuid is not None:
      size += getsizeof(self.net_ipam_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VMUuid(object):
  """
  Attributes:
   - vm_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vm_uuid', None, None, ), # 1
  )

  def __init__(self, vm_uuid=None,):
    self.vm_uuid = vm_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vm_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.vm_uuid is not None:
      annotations = {}
      annotations['link'] = 'VirtualMachineDatabaseList'
      if oprot.writeFieldBegin('vm_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vm_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.vm_uuid is not None:
      log_str.write('vm_uuid = ')
      log_str.write(self.vm_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.vm_uuid is not None:
      size += getsizeof(self.vm_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VRUuid(object):
  """
  Attributes:
   - vr_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vr_uuid', None, None, ), # 1
  )

  def __init__(self, vr_uuid=None,):
    self.vr_uuid = vr_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vr_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.vr_uuid is not None:
      annotations = {}
      annotations['link'] = 'VirtualRouterDatabaseList'
      if oprot.writeFieldBegin('vr_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vr_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.vr_uuid is not None:
      log_str.write('vr_uuid = ')
      log_str.write(self.vr_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.vr_uuid is not None:
      size += getsizeof(self.vr_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VMIUuid(object):
  """
  Attributes:
   - vmi_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vmi_uuid', None, None, ), # 1
  )

  def __init__(self, vmi_uuid=None,):
    self.vmi_uuid = vmi_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vmi_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.vmi_uuid is not None:
      annotations = {}
      annotations['link'] = 'VirtualMachineInterfaceDatabaseList'
      if oprot.writeFieldBegin('vmi_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vmi_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.vmi_uuid is not None:
      log_str.write('vmi_uuid = ')
      log_str.write(self.vmi_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.vmi_uuid is not None:
      size += getsizeof(self.vmi_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VNUuid(object):
  """
  Attributes:
   - vn_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vn_uuid', None, None, ), # 1
  )

  def __init__(self, vn_uuid=None,):
    self.vn_uuid = vn_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vn_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.vn_uuid is not None:
      annotations = {}
      annotations['link'] = 'VirtualNetworkDatabaseList'
      if oprot.writeFieldBegin('vn_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vn_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.vn_uuid is not None:
      log_str.write('vn_uuid = ')
      log_str.write(self.vn_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.vn_uuid is not None:
      size += getsizeof(self.vn_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGUuid(object):
  """
  Attributes:
   - sg_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sg_uuid', None, None, ), # 1
  )

  def __init__(self, sg_uuid=None,):
    self.sg_uuid = sg_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.sg_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.sg_uuid is not None:
      annotations = {}
      annotations['link'] = 'SecurityGroupDatabaseList'
      if oprot.writeFieldBegin('sg_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.sg_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.sg_uuid is not None:
      log_str.write('sg_uuid = ')
      log_str.write(self.sg_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.sg_uuid is not None:
      size += getsizeof(self.sg_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerInstance(object):
  """
  Attributes:
   - uuid_to_service
   - uuid_to_ingress
   - name
   - fq_name
   - annotations
   - external_ip
   - lb_listeners
   - selectors
   - vm_interfaces
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid_to_service', None, None, ), # 1
    (2, TType.STRING, 'uuid_to_ingress', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'external_ip', None, None, ), # 6
    (7, TType.LIST, 'lb_listeners', (TType.STRUCT,(LbListenerUuid, LbListenerUuid.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'selectors', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'vm_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 9
  )

  def __init__(self, uuid_to_service=None, uuid_to_ingress=None, name=None, fq_name=None, annotations=None, external_ip=None, lb_listeners=None, selectors=None, vm_interfaces=None,):
    self.uuid_to_service = uuid_to_service
    self.uuid_to_ingress = uuid_to_ingress
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.external_ip = external_ip
    self.lb_listeners = lb_listeners
    self.selectors = selectors
    self.vm_interfaces = vm_interfaces

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid_to_service) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.uuid_to_ingress) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype160, _size157) = iprot.readListBegin()
          read_cnt += length
          for _i161 in xrange(_size157):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem162) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem162)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype164, _vtype165, _size163 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i167 in xrange(_size163):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key168) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val169) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key168] = _val169
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.external_ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.lb_listeners = []
          (length, _etype173, _size170) = iprot.readListBegin()
          read_cnt += length
          for _i174 in xrange(_size170):
            _elem175 = LbListenerUuid()
            read_cnt += _elem175.read(iprot)
            self.lb_listeners.append(_elem175)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.selectors = []
          (length, _etype179, _size176) = iprot.readListBegin()
          read_cnt += length
          for _i180 in xrange(_size176):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem181) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.selectors.append(_elem181)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.vm_interfaces = []
          (length, _etype185, _size182) = iprot.readListBegin()
          read_cnt += length
          for _i186 in xrange(_size182):
            _elem187 = VMIUuid()
            read_cnt += _elem187.read(iprot)
            self.vm_interfaces.append(_elem187)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid_to_service is not None:
      annotations = {}
      annotations['link'] = 'ServiceDatabaseList'
      if oprot.writeFieldBegin('uuid_to_service', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid_to_service) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.uuid_to_ingress is not None:
      annotations = {}
      annotations['link'] = 'IngressDatabaseList'
      if oprot.writeFieldBegin('uuid_to_ingress', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.uuid_to_ingress) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 4, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter188 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter188) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 5, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter189,viter190 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter189) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter190) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.external_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('external_ip', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.external_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.lb_listeners is not None:
      annotations = {}
      if oprot.writeFieldBegin('lb_listeners', TType.LIST, 7, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.lb_listeners)) < 0: return -1
      for iter191 in self.lb_listeners:
        if iter191.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.selectors is not None:
      annotations = {}
      if oprot.writeFieldBegin('selectors', TType.LIST, 8, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.selectors)) < 0: return -1
      for iter192 in self.selectors:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter192) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vm_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_interfaces', TType.LIST, 9, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vm_interfaces)) < 0: return -1
      for iter193 in self.vm_interfaces:
        if iter193.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid_to_service is not None:
      log_str.write('uuid_to_service = ')
      log_str.write(self.uuid_to_service)
      log_str.write('  ')
    if self.uuid_to_ingress is not None:
      log_str.write('uuid_to_ingress = ')
      log_str.write(self.uuid_to_ingress)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter194 in self.fq_name:
        log_str.write(iter194)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter195,viter196 in self.annotations.iteritems():
        log_str.write(kiter195)
        log_str.write(' : ')
        log_str.write(viter196)
      log_str.write(' }')
      log_str.write('  ')
    if self.external_ip is not None:
      log_str.write('external_ip = ')
      log_str.write(self.external_ip)
      log_str.write('  ')
    if self.lb_listeners is not None:
      log_str.write('lb_listeners = ')
      log_str.write('[ ')
      for iter197 in self.lb_listeners:
        log_str.write('<<  ')
        log_str.write(iter197.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.selectors is not None:
      log_str.write('selectors = ')
      log_str.write('[ ')
      for iter198 in self.selectors:
        log_str.write(iter198)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.vm_interfaces is not None:
      log_str.write('vm_interfaces = ')
      log_str.write('[ ')
      for iter199 in self.vm_interfaces:
        log_str.write('<<  ')
        log_str.write(iter199.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid_to_service is not None:
      size += getsizeof(self.uuid_to_service)
    if self.uuid_to_ingress is not None:
      size += getsizeof(self.uuid_to_ingress)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.external_ip is not None:
      size += getsizeof(self.external_ip)
    if self.lb_listeners is not None:
      size += getsizeof(self.lb_listeners)
      size += sum(map(getsizeof, self.lb_listeners))
    if self.selectors is not None:
      size += getsizeof(self.selectors)
      size += sum(map(getsizeof, self.selectors))
    if self.vm_interfaces is not None:
      size += getsizeof(self.vm_interfaces)
      size += sum(map(getsizeof, self.vm_interfaces))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerListenerInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - id_perms
   - loadbalancer
   - loadbalancer_pool
   - port_name
   - parent_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'id_perms', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'loadbalancer', None, None, ), # 6
    (7, TType.STRING, 'loadbalancer_pool', None, None, ), # 7
    (8, TType.STRING, 'port_name', None, None, ), # 8
    (9, TType.STRING, 'parent_uuid', None, None, ), # 9
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, id_perms=None, loadbalancer=None, loadbalancer_pool=None, port_name=None, parent_uuid=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.id_perms = id_perms
    self.loadbalancer = loadbalancer
    self.loadbalancer_pool = loadbalancer_pool
    self.port_name = port_name
    self.parent_uuid = parent_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype203, _size200) = iprot.readListBegin()
          read_cnt += length
          for _i204 in xrange(_size200):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem205) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem205)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype207, _vtype208, _size206 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i210 in xrange(_size206):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key211) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val212) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key211] = _val212
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.id_perms = {}
          (length, _ktype214, _vtype215, _size213 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i217 in xrange(_size213):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key218) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val219) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.id_perms[_key218] = _val219
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.loadbalancer) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.loadbalancer_pool) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          (length, self.port_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          (length, self.parent_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter220 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter220) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter221,viter222 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter221) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter222) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.id_perms is not None:
      annotations = {}
      if oprot.writeFieldBegin('id_perms', TType.MAP, 5, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.id_perms)) < 0: return -1
      for kiter223,viter224 in self.id_perms.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter223) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter224) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.loadbalancer is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerDatabaseList'
      if oprot.writeFieldBegin('loadbalancer', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.loadbalancer) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.loadbalancer_pool is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerPoolDatabaseList'
      if oprot.writeFieldBegin('loadbalancer_pool', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.loadbalancer_pool) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.port_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('port_name', TType.STRING, 8, annotations) < 0: return -1
      if oprot.writeString(self.port_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.parent_uuid is not None:
      annotations = {}
      annotations['link'] = 'ProjectDatabaseList'
      if oprot.writeFieldBegin('parent_uuid', TType.STRING, 9, annotations) < 0: return -1
      if oprot.writeString(self.parent_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter225 in self.fq_name:
        log_str.write(iter225)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter226,viter227 in self.annotations.iteritems():
        log_str.write(kiter226)
        log_str.write(' : ')
        log_str.write(viter227)
      log_str.write(' }')
      log_str.write('  ')
    if self.id_perms is not None:
      log_str.write('id_perms = ')
      log_str.write('{ ')
      for kiter228,viter229 in self.id_perms.iteritems():
        log_str.write(kiter228)
        log_str.write(' : ')
        log_str.write(viter229)
      log_str.write(' }')
      log_str.write('  ')
    if self.loadbalancer is not None:
      log_str.write('loadbalancer = ')
      log_str.write(self.loadbalancer)
      log_str.write('  ')
    if self.loadbalancer_pool is not None:
      log_str.write('loadbalancer_pool = ')
      log_str.write(self.loadbalancer_pool)
      log_str.write('  ')
    if self.port_name is not None:
      log_str.write('port_name = ')
      log_str.write(self.port_name)
      log_str.write('  ')
    if self.parent_uuid is not None:
      log_str.write('parent_uuid = ')
      log_str.write(self.parent_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.id_perms is not None:
      size += getsizeof(self.id_perms)
      size += sum(map(getsizeof, chain.from_iterable(self.id_perms.iteritems())))
    if self.loadbalancer is not None:
      size += getsizeof(self.loadbalancer)
    if self.loadbalancer_pool is not None:
      size += getsizeof(self.loadbalancer_pool)
    if self.port_name is not None:
      size += getsizeof(self.port_name)
    if self.parent_uuid is not None:
      size += getsizeof(self.parent_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerPoolInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - custom_attributes
   - id_perms
   - loadbalancer_listener
   - members
   - params
   - parent_uuid
   - provider
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'custom_attributes', (TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'id_perms', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'loadbalancer_listener', None, None, ), # 7
    (8, TType.LIST, 'members', (TType.STRING,None), None, ), # 8
    (9, TType.MAP, 'params', (TType.STRING,None,TType.STRING,None), None, ), # 9
    (10, TType.STRING, 'parent_uuid', None, None, ), # 10
    (11, TType.STRING, 'provider', None, None, ), # 11
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, custom_attributes=None, id_perms=None, loadbalancer_listener=None, members=None, params=None, parent_uuid=None, provider=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.custom_attributes = custom_attributes
    self.id_perms = id_perms
    self.loadbalancer_listener = loadbalancer_listener
    self.members = members
    self.params = params
    self.parent_uuid = parent_uuid
    self.provider = provider

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype233, _size230) = iprot.readListBegin()
          read_cnt += length
          for _i234 in xrange(_size230):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem235) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem235)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype237, _vtype238, _size236 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i240 in xrange(_size236):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key241) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val242) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key241] = _val242
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.custom_attributes = []
          (length, _etype246, _size243) = iprot.readListBegin()
          read_cnt += length
          for _i247 in xrange(_size243):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem248) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.custom_attributes.append(_elem248)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.id_perms = {}
          (length, _ktype250, _vtype251, _size249 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i253 in xrange(_size249):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key254) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val255) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.id_perms[_key254] = _val255
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.loadbalancer_listener) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.members = []
          (length, _etype259, _size256) = iprot.readListBegin()
          read_cnt += length
          for _i260 in xrange(_size256):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem261) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.members.append(_elem261)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.params = {}
          (length, _ktype263, _vtype264, _size262 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i266 in xrange(_size262):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key267) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val268) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.params[_key267] = _val268
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          (length, self.parent_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          (length, self.provider) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter269 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter269) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter270,viter271 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter270) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter271) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.custom_attributes is not None:
      annotations = {}
      if oprot.writeFieldBegin('custom_attributes', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.custom_attributes)) < 0: return -1
      for iter272 in self.custom_attributes:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter272) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.id_perms is not None:
      annotations = {}
      if oprot.writeFieldBegin('id_perms', TType.MAP, 6, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.id_perms)) < 0: return -1
      for kiter273,viter274 in self.id_perms.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter273) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter274) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.loadbalancer_listener is not None:
      annotations = {}
      annotations['link'] = 'LoadbalancerListenerDatabaseList'
      if oprot.writeFieldBegin('loadbalancer_listener', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.loadbalancer_listener) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.members is not None:
      annotations = {}
      if oprot.writeFieldBegin('members', TType.LIST, 8, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.members)) < 0: return -1
      for iter275 in self.members:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter275) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.params is not None:
      annotations = {}
      if oprot.writeFieldBegin('params', TType.MAP, 9, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.params)) < 0: return -1
      for kiter276,viter277 in self.params.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter276) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter277) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.parent_uuid is not None:
      annotations = {}
      annotations['link'] = 'ProjectDatabaseList'
      if oprot.writeFieldBegin('parent_uuid', TType.STRING, 10, annotations) < 0: return -1
      if oprot.writeString(self.parent_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.provider is not None:
      annotations = {}
      if oprot.writeFieldBegin('provider', TType.STRING, 11, annotations) < 0: return -1
      if oprot.writeString(self.provider) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter278 in self.fq_name:
        log_str.write(iter278)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter279,viter280 in self.annotations.iteritems():
        log_str.write(kiter279)
        log_str.write(' : ')
        log_str.write(viter280)
      log_str.write(' }')
      log_str.write('  ')
    if self.custom_attributes is not None:
      log_str.write('custom_attributes = ')
      log_str.write('[ ')
      for iter281 in self.custom_attributes:
        log_str.write(iter281)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.id_perms is not None:
      log_str.write('id_perms = ')
      log_str.write('{ ')
      for kiter282,viter283 in self.id_perms.iteritems():
        log_str.write(kiter282)
        log_str.write(' : ')
        log_str.write(viter283)
      log_str.write(' }')
      log_str.write('  ')
    if self.loadbalancer_listener is not None:
      log_str.write('loadbalancer_listener = ')
      log_str.write(self.loadbalancer_listener)
      log_str.write('  ')
    if self.members is not None:
      log_str.write('members = ')
      log_str.write('[ ')
      for iter284 in self.members:
        log_str.write(iter284)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.params is not None:
      log_str.write('params = ')
      log_str.write('{ ')
      for kiter285,viter286 in self.params.iteritems():
        log_str.write(kiter285)
        log_str.write(' : ')
        log_str.write(viter286)
      log_str.write(' }')
      log_str.write('  ')
    if self.parent_uuid is not None:
      log_str.write('parent_uuid = ')
      log_str.write(self.parent_uuid)
      log_str.write('  ')
    if self.provider is not None:
      log_str.write('provider = ')
      log_str.write(self.provider)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.custom_attributes is not None:
      size += getsizeof(self.custom_attributes)
      size += sum(map(getsizeof, self.custom_attributes))
    if self.id_perms is not None:
      size += getsizeof(self.id_perms)
      size += sum(map(getsizeof, chain.from_iterable(self.id_perms.iteritems())))
    if self.loadbalancer_listener is not None:
      size += getsizeof(self.loadbalancer_listener)
    if self.members is not None:
      size += getsizeof(self.members)
      size += sum(map(getsizeof, self.members))
    if self.params is not None:
      size += getsizeof(self.params)
      size += sum(map(getsizeof, chain.from_iterable(self.params.iteritems())))
    if self.parent_uuid is not None:
      size += getsizeof(self.parent_uuid)
    if self.provider is not None:
      size += getsizeof(self.provider)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerMemberInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype290, _size287) = iprot.readListBegin()
          read_cnt += length
          for _i291 in xrange(_size287):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem292) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem292)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype294, _vtype295, _size293 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i297 in xrange(_size293):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key298) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val299) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key298] = _val299
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter300 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter300) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter301,viter302 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter301) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter302) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter303 in self.fq_name:
        log_str.write(iter303)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter304,viter305 in self.annotations.iteritems():
        log_str.write(kiter304)
        log_str.write(' : ')
        log_str.write(viter305)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HealthMonitorInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype309, _size306) = iprot.readListBegin()
          read_cnt += length
          for _i310 in xrange(_size306):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem311) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem311)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype313, _vtype314, _size312 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i316 in xrange(_size312):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key317) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val318) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key317] = _val318
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter319 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter319) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter320,viter321 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter320) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter321) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter322 in self.fq_name:
        log_str.write(iter322)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter323,viter324 in self.annotations.iteritems():
        log_str.write(kiter323)
        log_str.write(' : ')
        log_str.write(viter324)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineInstance(object):
  """
  Attributes:
   - uuid
   - name
   - annotations
   - owner
   - node_ip
   - pod_namespace
   - pod_node
   - pod_labels
   - vm_interfaces
   - vrouter_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'owner', None, None, ), # 4
    (5, TType.STRING, 'node_ip', None, None, ), # 5
    (6, TType.STRING, 'pod_namespace', None, None, ), # 6
    (7, TType.STRING, 'pod_node', None, None, ), # 7
    (8, TType.MAP, 'pod_labels', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'vm_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 9
    (10, TType.STRUCT, 'vrouter_uuid', (VRUuid, VRUuid.thrift_spec), None, ), # 10
  )

  def __init__(self, uuid=None, name=None, annotations=None, owner=None, node_ip=None, pod_namespace=None, pod_node=None, pod_labels=None, vm_interfaces=None, vrouter_uuid=None,):
    self.uuid = uuid
    self.name = name
    self.annotations = annotations
    self.owner = owner
    self.node_ip = node_ip
    self.pod_namespace = pod_namespace
    self.pod_node = pod_node
    self.pod_labels = pod_labels
    self.vm_interfaces = vm_interfaces
    self.vrouter_uuid = vrouter_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype326, _vtype327, _size325 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i329 in xrange(_size325):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key330) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val331) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key330] = _val331
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          (length, self.owner) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.node_ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.pod_namespace) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.pod_node) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.pod_labels = {}
          (length, _ktype333, _vtype334, _size332 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i336 in xrange(_size332):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key337) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val338) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.pod_labels[_key337] = _val338
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.vm_interfaces = []
          (length, _etype342, _size339) = iprot.readListBegin()
          read_cnt += length
          for _i343 in xrange(_size339):
            _elem344 = VMIUuid()
            read_cnt += _elem344.read(iprot)
            self.vm_interfaces.append(_elem344)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.vrouter_uuid = VRUuid()
          read_cnt += self.vrouter_uuid.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      annotations['link'] = 'PodDatabaseList'
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 3, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter345,viter346 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter345) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter346) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.owner is not None:
      annotations = {}
      if oprot.writeFieldBegin('owner', TType.STRING, 4, annotations) < 0: return -1
      if oprot.writeString(self.owner) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.node_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('node_ip', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.node_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.pod_namespace is not None:
      annotations = {}
      if oprot.writeFieldBegin('pod_namespace', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.pod_namespace) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.pod_node is not None:
      annotations = {}
      if oprot.writeFieldBegin('pod_node', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.pod_node) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.pod_labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('pod_labels', TType.MAP, 8, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.pod_labels)) < 0: return -1
      for kiter347,viter348 in self.pod_labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter347) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter348) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vm_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_interfaces', TType.LIST, 9, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vm_interfaces)) < 0: return -1
      for iter349 in self.vm_interfaces:
        if iter349.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vrouter_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vrouter_uuid', TType.STRUCT, 10, annotations) < 0: return -1
      if self.vrouter_uuid.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter350,viter351 in self.annotations.iteritems():
        log_str.write(kiter350)
        log_str.write(' : ')
        log_str.write(viter351)
      log_str.write(' }')
      log_str.write('  ')
    if self.owner is not None:
      log_str.write('owner = ')
      log_str.write(self.owner)
      log_str.write('  ')
    if self.node_ip is not None:
      log_str.write('node_ip = ')
      log_str.write(self.node_ip)
      log_str.write('  ')
    if self.pod_namespace is not None:
      log_str.write('pod_namespace = ')
      log_str.write(self.pod_namespace)
      log_str.write('  ')
    if self.pod_node is not None:
      log_str.write('pod_node = ')
      log_str.write(self.pod_node)
      log_str.write('  ')
    if self.pod_labels is not None:
      log_str.write('pod_labels = ')
      log_str.write('{ ')
      for kiter352,viter353 in self.pod_labels.iteritems():
        log_str.write(kiter352)
        log_str.write(' : ')
        log_str.write(viter353)
      log_str.write(' }')
      log_str.write('  ')
    if self.vm_interfaces is not None:
      log_str.write('vm_interfaces = ')
      log_str.write('[ ')
      for iter354 in self.vm_interfaces:
        log_str.write('<<  ')
        log_str.write(iter354.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.vrouter_uuid is not None:
      log_str.write('vrouter_uuid = ')
      log_str.write('<<  ')
      log_str.write(self.vrouter_uuid.log())
      log_str.write('>>')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.owner is not None:
      size += getsizeof(self.owner)
    if self.node_ip is not None:
      size += getsizeof(self.node_ip)
    if self.pod_namespace is not None:
      size += getsizeof(self.pod_namespace)
    if self.pod_node is not None:
      size += getsizeof(self.pod_node)
    if self.pod_labels is not None:
      size += getsizeof(self.pod_labels)
      size += sum(map(getsizeof, chain.from_iterable(self.pod_labels.iteritems())))
    if self.vm_interfaces is not None:
      size += getsizeof(self.vm_interfaces)
      size += sum(map(getsizeof, self.vm_interfaces))
    if self.vrouter_uuid is not None:
      size += getsizeof(self.vrouter_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualRouterInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - virtual_machines
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'virtual_machines', (TType.STRUCT,(VMUuid, VMUuid.thrift_spec)), None, ), # 5
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, virtual_machines=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.virtual_machines = virtual_machines

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype358, _size355) = iprot.readListBegin()
          read_cnt += length
          for _i359 in xrange(_size355):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem360) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem360)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype362, _vtype363, _size361 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i365 in xrange(_size361):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key366) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val367) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key366] = _val367
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.virtual_machines = []
          (length, _etype371, _size368) = iprot.readListBegin()
          read_cnt += length
          for _i372 in xrange(_size368):
            _elem373 = VMUuid()
            read_cnt += _elem373.read(iprot)
            self.virtual_machines.append(_elem373)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter374 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter374) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter375,viter376 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter375) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter376) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_machines is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_machines', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.virtual_machines)) < 0: return -1
      for iter377 in self.virtual_machines:
        if iter377.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter378 in self.fq_name:
        log_str.write(iter378)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter379,viter380 in self.annotations.iteritems():
        log_str.write(kiter379)
        log_str.write(' : ')
        log_str.write(viter380)
      log_str.write(' }')
      log_str.write('  ')
    if self.virtual_machines is not None:
      log_str.write('virtual_machines = ')
      log_str.write('[ ')
      for iter381 in self.virtual_machines:
        log_str.write('<<  ')
        log_str.write(iter381.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.virtual_machines is not None:
      size += getsizeof(self.virtual_machines)
      size += sum(map(getsizeof, self.virtual_machines))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineInterfaceInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - floating_ips
   - host_id
   - security_groups
   - virtual_machine
   - virtual_machine_interfaces
   - virtual_network
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'floating_ips', (TType.STRUCT,(FIPUuid, FIPUuid.thrift_spec)), None, ), # 5
    (6, TType.STRING, 'host_id', None, None, ), # 6
    (7, TType.LIST, 'security_groups', (TType.STRUCT,(SGUuid, SGUuid.thrift_spec)), None, ), # 7
    (8, TType.STRING, 'virtual_machine', None, None, ), # 8
    (9, TType.LIST, 'virtual_machine_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 9
    (10, TType.STRING, 'virtual_network', None, None, ), # 10
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, floating_ips=None, host_id=None, security_groups=None, virtual_machine=None, virtual_machine_interfaces=None, virtual_network=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.floating_ips = floating_ips
    self.host_id = host_id
    self.security_groups = security_groups
    self.virtual_machine = virtual_machine
    self.virtual_machine_interfaces = virtual_machine_interfaces
    self.virtual_network = virtual_network

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype385, _size382) = iprot.readListBegin()
          read_cnt += length
          for _i386 in xrange(_size382):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem387) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem387)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype389, _vtype390, _size388 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i392 in xrange(_size388):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key393) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val394) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key393] = _val394
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.floating_ips = []
          (length, _etype398, _size395) = iprot.readListBegin()
          read_cnt += length
          for _i399 in xrange(_size395):
            _elem400 = FIPUuid()
            read_cnt += _elem400.read(iprot)
            self.floating_ips.append(_elem400)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.host_id) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.security_groups = []
          (length, _etype404, _size401) = iprot.readListBegin()
          read_cnt += length
          for _i405 in xrange(_size401):
            _elem406 = SGUuid()
            read_cnt += _elem406.read(iprot)
            self.security_groups.append(_elem406)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          (length, self.virtual_machine) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.virtual_machine_interfaces = []
          (length, _etype410, _size407) = iprot.readListBegin()
          read_cnt += length
          for _i411 in xrange(_size407):
            _elem412 = VMIUuid()
            read_cnt += _elem412.read(iprot)
            self.virtual_machine_interfaces.append(_elem412)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          (length, self.virtual_network) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter413 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter413) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter414,viter415 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter414) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter415) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.floating_ips is not None:
      annotations = {}
      if oprot.writeFieldBegin('floating_ips', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.floating_ips)) < 0: return -1
      for iter416 in self.floating_ips:
        if iter416.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.host_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('host_id', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.host_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.security_groups is not None:
      annotations = {}
      if oprot.writeFieldBegin('security_groups', TType.LIST, 7, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.security_groups)) < 0: return -1
      for iter417 in self.security_groups:
        if iter417.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_machine is not None:
      annotations = {}
      annotations['link'] = 'VirtualMachineDatabaseList'
      if oprot.writeFieldBegin('virtual_machine', TType.STRING, 8, annotations) < 0: return -1
      if oprot.writeString(self.virtual_machine) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_machine_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_machine_interfaces', TType.LIST, 9, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.virtual_machine_interfaces)) < 0: return -1
      for iter418 in self.virtual_machine_interfaces:
        if iter418.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_network is not None:
      annotations = {}
      annotations['link'] = 'VirtualNetworkDatabaseList'
      if oprot.writeFieldBegin('virtual_network', TType.STRING, 10, annotations) < 0: return -1
      if oprot.writeString(self.virtual_network) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter419 in self.fq_name:
        log_str.write(iter419)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter420,viter421 in self.annotations.iteritems():
        log_str.write(kiter420)
        log_str.write(' : ')
        log_str.write(viter421)
      log_str.write(' }')
      log_str.write('  ')
    if self.floating_ips is not None:
      log_str.write('floating_ips = ')
      log_str.write('[ ')
      for iter422 in self.floating_ips:
        log_str.write('<<  ')
        log_str.write(iter422.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.host_id is not None:
      log_str.write('host_id = ')
      log_str.write(self.host_id)
      log_str.write('  ')
    if self.security_groups is not None:
      log_str.write('security_groups = ')
      log_str.write('[ ')
      for iter423 in self.security_groups:
        log_str.write('<<  ')
        log_str.write(iter423.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_machine is not None:
      log_str.write('virtual_machine = ')
      log_str.write(self.virtual_machine)
      log_str.write('  ')
    if self.virtual_machine_interfaces is not None:
      log_str.write('virtual_machine_interfaces = ')
      log_str.write('[ ')
      for iter424 in self.virtual_machine_interfaces:
        log_str.write('<<  ')
        log_str.write(iter424.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_network is not None:
      log_str.write('virtual_network = ')
      log_str.write(self.virtual_network)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.floating_ips is not None:
      size += getsizeof(self.floating_ips)
      size += sum(map(getsizeof, self.floating_ips))
    if self.host_id is not None:
      size += getsizeof(self.host_id)
    if self.security_groups is not None:
      size += getsizeof(self.security_groups)
      size += sum(map(getsizeof, self.security_groups))
    if self.virtual_machine is not None:
      size += getsizeof(self.virtual_machine)
    if self.virtual_machine_interfaces is not None:
      size += getsizeof(self.virtual_machine_interfaces)
      size += sum(map(getsizeof, self.virtual_machine_interfaces))
    if self.virtual_network is not None:
      size += getsizeof(self.virtual_network)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkIpamSubnetInstance(object):
  """
  Attributes:
   - uuid
   - fq_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, uuid=None, fq_name=None,):
    self.uuid = uuid
    self.fq_name = fq_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype428, _size425) = iprot.readListBegin()
          read_cnt += length
          for _i429 in xrange(_size425):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem430) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem430)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter431 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter431) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter432 in self.fq_name:
        log_str.write(iter432)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualNetworkInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - virtual_machine_interfaces
   - instance_ips
   - network_ipams
   - network_ipam_subnets
   - k8s_namespace
   - k8s_namespace_isolated
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'virtual_machine_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'instance_ips', (TType.STRUCT,(IIPUuid, IIPUuid.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'network_ipams', (TType.STRUCT,(NIPAMUuid, NIPAMUuid.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'network_ipam_subnets', (TType.STRUCT,(NetworkIpamSubnetInstance, NetworkIpamSubnetInstance.thrift_spec)), None, ), # 8
    (9, TType.STRING, 'k8s_namespace', None, None, ), # 9
    (10, TType.BOOL, 'k8s_namespace_isolated', None, None, ), # 10
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, virtual_machine_interfaces=None, instance_ips=None, network_ipams=None, network_ipam_subnets=None, k8s_namespace=None, k8s_namespace_isolated=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.virtual_machine_interfaces = virtual_machine_interfaces
    self.instance_ips = instance_ips
    self.network_ipams = network_ipams
    self.network_ipam_subnets = network_ipam_subnets
    self.k8s_namespace = k8s_namespace
    self.k8s_namespace_isolated = k8s_namespace_isolated

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype436, _size433) = iprot.readListBegin()
          read_cnt += length
          for _i437 in xrange(_size433):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem438) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem438)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype440, _vtype441, _size439 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i443 in xrange(_size439):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key444) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val445) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key444] = _val445
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.virtual_machine_interfaces = []
          (length, _etype449, _size446) = iprot.readListBegin()
          read_cnt += length
          for _i450 in xrange(_size446):
            _elem451 = VMIUuid()
            read_cnt += _elem451.read(iprot)
            self.virtual_machine_interfaces.append(_elem451)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.instance_ips = []
          (length, _etype455, _size452) = iprot.readListBegin()
          read_cnt += length
          for _i456 in xrange(_size452):
            _elem457 = IIPUuid()
            read_cnt += _elem457.read(iprot)
            self.instance_ips.append(_elem457)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.network_ipams = []
          (length, _etype461, _size458) = iprot.readListBegin()
          read_cnt += length
          for _i462 in xrange(_size458):
            _elem463 = NIPAMUuid()
            read_cnt += _elem463.read(iprot)
            self.network_ipams.append(_elem463)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.network_ipam_subnets = []
          (length, _etype467, _size464) = iprot.readListBegin()
          read_cnt += length
          for _i468 in xrange(_size464):
            _elem469 = NetworkIpamSubnetInstance()
            read_cnt += _elem469.read(iprot)
            self.network_ipam_subnets.append(_elem469)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          (length, self.k8s_namespace) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          (length, self.k8s_namespace_isolated) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter470 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter470) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter471,viter472 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter471) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter472) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_machine_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_machine_interfaces', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.virtual_machine_interfaces)) < 0: return -1
      for iter473 in self.virtual_machine_interfaces:
        if iter473.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.instance_ips is not None:
      annotations = {}
      if oprot.writeFieldBegin('instance_ips', TType.LIST, 6, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.instance_ips)) < 0: return -1
      for iter474 in self.instance_ips:
        if iter474.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.network_ipams is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_ipams', TType.LIST, 7, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.network_ipams)) < 0: return -1
      for iter475 in self.network_ipams:
        if iter475.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.network_ipam_subnets is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_ipam_subnets', TType.LIST, 8, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.network_ipam_subnets)) < 0: return -1
      for iter476 in self.network_ipam_subnets:
        if iter476.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.k8s_namespace is not None:
      annotations = {}
      if oprot.writeFieldBegin('k8s_namespace', TType.STRING, 9, annotations) < 0: return -1
      if oprot.writeString(self.k8s_namespace) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.k8s_namespace_isolated is not None:
      annotations = {}
      if oprot.writeFieldBegin('k8s_namespace_isolated', TType.BOOL, 10, annotations) < 0: return -1
      if oprot.writeBool(self.k8s_namespace_isolated) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter477 in self.fq_name:
        log_str.write(iter477)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter478,viter479 in self.annotations.iteritems():
        log_str.write(kiter478)
        log_str.write(' : ')
        log_str.write(viter479)
      log_str.write(' }')
      log_str.write('  ')
    if self.virtual_machine_interfaces is not None:
      log_str.write('virtual_machine_interfaces = ')
      log_str.write('[ ')
      for iter480 in self.virtual_machine_interfaces:
        log_str.write('<<  ')
        log_str.write(iter480.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.instance_ips is not None:
      log_str.write('instance_ips = ')
      log_str.write('[ ')
      for iter481 in self.instance_ips:
        log_str.write('<<  ')
        log_str.write(iter481.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.network_ipams is not None:
      log_str.write('network_ipams = ')
      log_str.write('[ ')
      for iter482 in self.network_ipams:
        log_str.write('<<  ')
        log_str.write(iter482.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.network_ipam_subnets is not None:
      log_str.write('network_ipam_subnets = ')
      log_str.write('[ ')
      for iter483 in self.network_ipam_subnets:
        log_str.write('<<  ')
        log_str.write(iter483.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.k8s_namespace is not None:
      log_str.write('k8s_namespace = ')
      log_str.write(self.k8s_namespace)
      log_str.write('  ')
    if self.k8s_namespace_isolated is not None:
      log_str.write('k8s_namespace_isolated = ')
      if self.k8s_namespace_isolated:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.virtual_machine_interfaces is not None:
      size += getsizeof(self.virtual_machine_interfaces)
      size += sum(map(getsizeof, self.virtual_machine_interfaces))
    if self.instance_ips is not None:
      size += getsizeof(self.instance_ips)
      size += sum(map(getsizeof, self.instance_ips))
    if self.network_ipams is not None:
      size += getsizeof(self.network_ipams)
      size += sum(map(getsizeof, self.network_ipams))
    if self.network_ipam_subnets is not None:
      size += getsizeof(self.network_ipam_subnets)
      size += sum(map(getsizeof, self.network_ipam_subnets))
    if self.k8s_namespace is not None:
      size += getsizeof(self.k8s_namespace)
    if self.k8s_namespace_isolated is not None:
      size += getsizeof(self.k8s_namespace_isolated)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceIpInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - address
   - family
   - vm_interfaces
   - virtual_networks
   - floating_ips
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'address', None, None, ), # 4
    (5, TType.STRING, 'family', None, None, ), # 5
    (6, TType.LIST, 'vm_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'virtual_networks', (TType.STRUCT,(VNUuid, VNUuid.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'floating_ips', (TType.STRUCT,(FIPUuid, FIPUuid.thrift_spec)), None, ), # 8
  )

  def __init__(self, uuid=None, name=None, fq_name=None, address=None, family=None, vm_interfaces=None, virtual_networks=None, floating_ips=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.address = address
    self.family = family
    self.vm_interfaces = vm_interfaces
    self.virtual_networks = virtual_networks
    self.floating_ips = floating_ips

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype487, _size484) = iprot.readListBegin()
          read_cnt += length
          for _i488 in xrange(_size484):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem489) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem489)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          (length, self.address) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.family) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.vm_interfaces = []
          (length, _etype493, _size490) = iprot.readListBegin()
          read_cnt += length
          for _i494 in xrange(_size490):
            _elem495 = VMIUuid()
            read_cnt += _elem495.read(iprot)
            self.vm_interfaces.append(_elem495)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.virtual_networks = []
          (length, _etype499, _size496) = iprot.readListBegin()
          read_cnt += length
          for _i500 in xrange(_size496):
            _elem501 = VNUuid()
            read_cnt += _elem501.read(iprot)
            self.virtual_networks.append(_elem501)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.floating_ips = []
          (length, _etype505, _size502) = iprot.readListBegin()
          read_cnt += length
          for _i506 in xrange(_size502):
            _elem507 = FIPUuid()
            read_cnt += _elem507.read(iprot)
            self.floating_ips.append(_elem507)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter508 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter508) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.address is not None:
      annotations = {}
      if oprot.writeFieldBegin('address', TType.STRING, 4, annotations) < 0: return -1
      if oprot.writeString(self.address) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.family is not None:
      annotations = {}
      if oprot.writeFieldBegin('family', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vm_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_interfaces', TType.LIST, 6, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vm_interfaces)) < 0: return -1
      for iter509 in self.vm_interfaces:
        if iter509.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_networks is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_networks', TType.LIST, 7, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.virtual_networks)) < 0: return -1
      for iter510 in self.virtual_networks:
        if iter510.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.floating_ips is not None:
      annotations = {}
      if oprot.writeFieldBegin('floating_ips', TType.LIST, 8, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.floating_ips)) < 0: return -1
      for iter511 in self.floating_ips:
        if iter511.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter512 in self.fq_name:
        log_str.write(iter512)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.address is not None:
      log_str.write('address = ')
      log_str.write(self.address)
      log_str.write('  ')
    if self.family is not None:
      log_str.write('family = ')
      log_str.write(self.family)
      log_str.write('  ')
    if self.vm_interfaces is not None:
      log_str.write('vm_interfaces = ')
      log_str.write('[ ')
      for iter513 in self.vm_interfaces:
        log_str.write('<<  ')
        log_str.write(iter513.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_networks is not None:
      log_str.write('virtual_networks = ')
      log_str.write('[ ')
      for iter514 in self.virtual_networks:
        log_str.write('<<  ')
        log_str.write(iter514.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.floating_ips is not None:
      log_str.write('floating_ips = ')
      log_str.write('[ ')
      for iter515 in self.floating_ips:
        log_str.write('<<  ')
        log_str.write(iter515.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.address is not None:
      size += getsizeof(self.address)
    if self.family is not None:
      size += getsizeof(self.family)
    if self.vm_interfaces is not None:
      size += getsizeof(self.vm_interfaces)
      size += sum(map(getsizeof, self.vm_interfaces))
    if self.virtual_networks is not None:
      size += getsizeof(self.virtual_networks)
      size += sum(map(getsizeof, self.virtual_networks))
    if self.floating_ips is not None:
      size += getsizeof(self.floating_ips)
      size += sum(map(getsizeof, self.floating_ips))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProjectInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - k8s_namespace_isolated
   - k8s_namespace_name
   - k8s_namespace_uuid
   - ns_labels
   - security_groups
   - virtual_networks
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.BOOL, 'k8s_namespace_isolated', None, None, ), # 5
    (6, TType.STRING, 'k8s_namespace_name', None, None, ), # 6
    (7, TType.STRING, 'k8s_namespace_uuid', None, None, ), # 7
    (8, TType.MAP, 'ns_labels', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'security_groups', (TType.STRUCT,(SGUuid, SGUuid.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'virtual_networks', (TType.STRUCT,(VNUuid, VNUuid.thrift_spec)), None, ), # 10
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, k8s_namespace_isolated=None, k8s_namespace_name=None, k8s_namespace_uuid=None, ns_labels=None, security_groups=None, virtual_networks=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.k8s_namespace_isolated = k8s_namespace_isolated
    self.k8s_namespace_name = k8s_namespace_name
    self.k8s_namespace_uuid = k8s_namespace_uuid
    self.ns_labels = ns_labels
    self.security_groups = security_groups
    self.virtual_networks = virtual_networks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype519, _size516) = iprot.readListBegin()
          read_cnt += length
          for _i520 in xrange(_size516):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem521) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem521)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype523, _vtype524, _size522 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i526 in xrange(_size522):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key527) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val528) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key527] = _val528
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          (length, self.k8s_namespace_isolated) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.k8s_namespace_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.k8s_namespace_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.ns_labels = {}
          (length, _ktype530, _vtype531, _size529 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i533 in xrange(_size529):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key534) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val535) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.ns_labels[_key534] = _val535
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.security_groups = []
          (length, _etype539, _size536) = iprot.readListBegin()
          read_cnt += length
          for _i540 in xrange(_size536):
            _elem541 = SGUuid()
            read_cnt += _elem541.read(iprot)
            self.security_groups.append(_elem541)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.virtual_networks = []
          (length, _etype545, _size542) = iprot.readListBegin()
          read_cnt += length
          for _i546 in xrange(_size542):
            _elem547 = VNUuid()
            read_cnt += _elem547.read(iprot)
            self.virtual_networks.append(_elem547)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter548 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter548) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter549,viter550 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter549) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter550) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.k8s_namespace_isolated is not None:
      annotations = {}
      if oprot.writeFieldBegin('k8s_namespace_isolated', TType.BOOL, 5, annotations) < 0: return -1
      if oprot.writeBool(self.k8s_namespace_isolated) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.k8s_namespace_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('k8s_namespace_name', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.k8s_namespace_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.k8s_namespace_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('k8s_namespace_uuid', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.k8s_namespace_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ns_labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('ns_labels', TType.MAP, 8, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ns_labels)) < 0: return -1
      for kiter551,viter552 in self.ns_labels.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter551) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter552) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.security_groups is not None:
      annotations = {}
      if oprot.writeFieldBegin('security_groups', TType.LIST, 9, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.security_groups)) < 0: return -1
      for iter553 in self.security_groups:
        if iter553.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_networks is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_networks', TType.LIST, 10, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.virtual_networks)) < 0: return -1
      for iter554 in self.virtual_networks:
        if iter554.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter555 in self.fq_name:
        log_str.write(iter555)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter556,viter557 in self.annotations.iteritems():
        log_str.write(kiter556)
        log_str.write(' : ')
        log_str.write(viter557)
      log_str.write(' }')
      log_str.write('  ')
    if self.k8s_namespace_isolated is not None:
      log_str.write('k8s_namespace_isolated = ')
      if self.k8s_namespace_isolated:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.k8s_namespace_name is not None:
      log_str.write('k8s_namespace_name = ')
      log_str.write(self.k8s_namespace_name)
      log_str.write('  ')
    if self.k8s_namespace_uuid is not None:
      log_str.write('k8s_namespace_uuid = ')
      log_str.write(self.k8s_namespace_uuid)
      log_str.write('  ')
    if self.ns_labels is not None:
      log_str.write('ns_labels = ')
      log_str.write('{ ')
      for kiter558,viter559 in self.ns_labels.iteritems():
        log_str.write(kiter558)
        log_str.write(' : ')
        log_str.write(viter559)
      log_str.write(' }')
      log_str.write('  ')
    if self.security_groups is not None:
      log_str.write('security_groups = ')
      log_str.write('[ ')
      for iter560 in self.security_groups:
        log_str.write('<<  ')
        log_str.write(iter560.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_networks is not None:
      log_str.write('virtual_networks = ')
      log_str.write('[ ')
      for iter561 in self.virtual_networks:
        log_str.write('<<  ')
        log_str.write(iter561.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.k8s_namespace_isolated is not None:
      size += getsizeof(self.k8s_namespace_isolated)
    if self.k8s_namespace_name is not None:
      size += getsizeof(self.k8s_namespace_name)
    if self.k8s_namespace_uuid is not None:
      size += getsizeof(self.k8s_namespace_uuid)
    if self.ns_labels is not None:
      size += getsizeof(self.ns_labels)
      size += sum(map(getsizeof, chain.from_iterable(self.ns_labels.iteritems())))
    if self.security_groups is not None:
      size += getsizeof(self.security_groups)
      size += sum(map(getsizeof, self.security_groups))
    if self.virtual_networks is not None:
      size += getsizeof(self.virtual_networks)
      size += sum(map(getsizeof, self.virtual_networks))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DomainInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype565, _size562) = iprot.readListBegin()
          read_cnt += length
          for _i566 in xrange(_size562):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem567) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem567)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype569, _vtype570, _size568 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i572 in xrange(_size568):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key573) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val574) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key573] = _val574
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter575 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter575) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter576,viter577 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter576) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter577) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter578 in self.fq_name:
        log_str.write(iter578)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter579,viter580 in self.annotations.iteritems():
        log_str.write(kiter579)
        log_str.write(' : ')
        log_str.write(viter580)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGAddress(object):
  """
  Attributes:
   - network_policy
   - security_group
   - subnet
   - subnet_list
   - virtual_network
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'network_policy', None, None, ), # 1
    (2, TType.STRING, 'security_group', None, None, ), # 2
    (3, TType.STRING, 'subnet', None, None, ), # 3
    (4, TType.LIST, 'subnet_list', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'virtual_network', None, None, ), # 5
  )

  def __init__(self, network_policy=None, security_group=None, subnet=None, subnet_list=None, virtual_network=None,):
    self.network_policy = network_policy
    self.security_group = security_group
    self.subnet = subnet
    self.subnet_list = subnet_list
    self.virtual_network = virtual_network

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.network_policy) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.security_group) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.subnet) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.subnet_list = []
          (length, _etype584, _size581) = iprot.readListBegin()
          read_cnt += length
          for _i585 in xrange(_size581):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem586) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.subnet_list.append(_elem586)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.virtual_network) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.network_policy is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_policy', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.network_policy) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.security_group is not None:
      annotations = {}
      if oprot.writeFieldBegin('security_group', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.security_group) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.subnet is not None:
      annotations = {}
      if oprot.writeFieldBegin('subnet', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.subnet) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.subnet_list is not None:
      annotations = {}
      if oprot.writeFieldBegin('subnet_list', TType.LIST, 4, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.subnet_list)) < 0: return -1
      for iter587 in self.subnet_list:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter587) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_network is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_network', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.virtual_network) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.network_policy is not None:
      log_str.write('network_policy = ')
      log_str.write(self.network_policy)
      log_str.write('  ')
    if self.security_group is not None:
      log_str.write('security_group = ')
      log_str.write(self.security_group)
      log_str.write('  ')
    if self.subnet is not None:
      log_str.write('subnet = ')
      log_str.write(self.subnet)
      log_str.write('  ')
    if self.subnet_list is not None:
      log_str.write('subnet_list = ')
      log_str.write('[ ')
      for iter588 in self.subnet_list:
        log_str.write(iter588)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_network is not None:
      log_str.write('virtual_network = ')
      log_str.write(self.virtual_network)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.network_policy is not None:
      size += getsizeof(self.network_policy)
    if self.security_group is not None:
      size += getsizeof(self.security_group)
    if self.subnet is not None:
      size += getsizeof(self.subnet)
    if self.subnet_list is not None:
      size += getsizeof(self.subnet_list)
      size += sum(map(getsizeof, self.subnet_list))
    if self.virtual_network is not None:
      size += getsizeof(self.virtual_network)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SGRuleEntry(object):
  """
  Attributes:
   - action_list
   - application
   - created
   - direction
   - dst_addresses
   - dst_ports
   - ethertype
   - last_modified
   - protocol
   - rule_sequence
   - rule_uuid
   - src_addresses
   - src_ports
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'action_list', None, None, ), # 1
    (2, TType.LIST, 'application', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'created', None, None, ), # 3
    (4, TType.STRING, 'direction', None, None, ), # 4
    (5, TType.LIST, 'dst_addresses', (TType.STRUCT,(SGAddress, SGAddress.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'dst_ports', (TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'ethertype', None, None, ), # 7
    (8, TType.STRING, 'last_modified', None, None, ), # 8
    (9, TType.STRING, 'protocol', None, None, ), # 9
    (10, TType.STRING, 'rule_sequence', None, None, ), # 10
    (11, TType.STRING, 'rule_uuid', None, None, ), # 11
    (12, TType.LIST, 'src_addresses', (TType.STRUCT,(SGAddress, SGAddress.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'src_ports', (TType.STRING,None), None, ), # 13
  )

  def __init__(self, action_list=None, application=None, created=None, direction=None, dst_addresses=None, dst_ports=None, ethertype=None, last_modified=None, protocol=None, rule_sequence=None, rule_uuid=None, src_addresses=None, src_ports=None,):
    self.action_list = action_list
    self.application = application
    self.created = created
    self.direction = direction
    self.dst_addresses = dst_addresses
    self.dst_ports = dst_ports
    self.ethertype = ethertype
    self.last_modified = last_modified
    self.protocol = protocol
    self.rule_sequence = rule_sequence
    self.rule_uuid = rule_uuid
    self.src_addresses = src_addresses
    self.src_ports = src_ports

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.action_list) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.application = []
          (length, _etype592, _size589) = iprot.readListBegin()
          read_cnt += length
          for _i593 in xrange(_size589):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem594) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.application.append(_elem594)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          (length, self.created) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          (length, self.direction) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.dst_addresses = []
          (length, _etype598, _size595) = iprot.readListBegin()
          read_cnt += length
          for _i599 in xrange(_size595):
            _elem600 = SGAddress()
            read_cnt += _elem600.read(iprot)
            self.dst_addresses.append(_elem600)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.dst_ports = []
          (length, _etype604, _size601) = iprot.readListBegin()
          read_cnt += length
          for _i605 in xrange(_size601):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem606) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.dst_ports.append(_elem606)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.ethertype) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          (length, self.last_modified) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          (length, self.protocol) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          (length, self.rule_sequence) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          (length, self.rule_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.src_addresses = []
          (length, _etype610, _size607) = iprot.readListBegin()
          read_cnt += length
          for _i611 in xrange(_size607):
            _elem612 = SGAddress()
            read_cnt += _elem612.read(iprot)
            self.src_addresses.append(_elem612)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.src_ports = []
          (length, _etype616, _size613) = iprot.readListBegin()
          read_cnt += length
          for _i617 in xrange(_size613):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem618) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.src_ports.append(_elem618)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.action_list is not None:
      annotations = {}
      if oprot.writeFieldBegin('action_list', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.action_list) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.application is not None:
      annotations = {}
      if oprot.writeFieldBegin('application', TType.LIST, 2, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.application)) < 0: return -1
      for iter619 in self.application:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter619) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.created is not None:
      annotations = {}
      if oprot.writeFieldBegin('created', TType.STRING, 3, annotations) < 0: return -1
      if oprot.writeString(self.created) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.direction is not None:
      annotations = {}
      if oprot.writeFieldBegin('direction', TType.STRING, 4, annotations) < 0: return -1
      if oprot.writeString(self.direction) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.dst_addresses is not None:
      annotations = {}
      if oprot.writeFieldBegin('dst_addresses', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.dst_addresses)) < 0: return -1
      for iter620 in self.dst_addresses:
        if iter620.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.dst_ports is not None:
      annotations = {}
      if oprot.writeFieldBegin('dst_ports', TType.LIST, 6, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.dst_ports)) < 0: return -1
      for iter621 in self.dst_ports:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter621) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ethertype is not None:
      annotations = {}
      if oprot.writeFieldBegin('ethertype', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.ethertype) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.last_modified is not None:
      annotations = {}
      if oprot.writeFieldBegin('last_modified', TType.STRING, 8, annotations) < 0: return -1
      if oprot.writeString(self.last_modified) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.protocol is not None:
      annotations = {}
      if oprot.writeFieldBegin('protocol', TType.STRING, 9, annotations) < 0: return -1
      if oprot.writeString(self.protocol) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rule_sequence is not None:
      annotations = {}
      if oprot.writeFieldBegin('rule_sequence', TType.STRING, 10, annotations) < 0: return -1
      if oprot.writeString(self.rule_sequence) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rule_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('rule_uuid', TType.STRING, 11, annotations) < 0: return -1
      if oprot.writeString(self.rule_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.src_addresses is not None:
      annotations = {}
      if oprot.writeFieldBegin('src_addresses', TType.LIST, 12, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.src_addresses)) < 0: return -1
      for iter622 in self.src_addresses:
        if iter622.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.src_ports is not None:
      annotations = {}
      if oprot.writeFieldBegin('src_ports', TType.LIST, 13, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.src_ports)) < 0: return -1
      for iter623 in self.src_ports:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter623) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.action_list is not None:
      log_str.write('action_list = ')
      log_str.write(self.action_list)
      log_str.write('  ')
    if self.application is not None:
      log_str.write('application = ')
      log_str.write('[ ')
      for iter624 in self.application:
        log_str.write(iter624)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.created is not None:
      log_str.write('created = ')
      log_str.write(self.created)
      log_str.write('  ')
    if self.direction is not None:
      log_str.write('direction = ')
      log_str.write(self.direction)
      log_str.write('  ')
    if self.dst_addresses is not None:
      log_str.write('dst_addresses = ')
      log_str.write('[ ')
      for iter625 in self.dst_addresses:
        log_str.write('<<  ')
        log_str.write(iter625.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.dst_ports is not None:
      log_str.write('dst_ports = ')
      log_str.write('[ ')
      for iter626 in self.dst_ports:
        log_str.write(iter626)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.ethertype is not None:
      log_str.write('ethertype = ')
      log_str.write(self.ethertype)
      log_str.write('  ')
    if self.last_modified is not None:
      log_str.write('last_modified = ')
      log_str.write(self.last_modified)
      log_str.write('  ')
    if self.protocol is not None:
      log_str.write('protocol = ')
      log_str.write(self.protocol)
      log_str.write('  ')
    if self.rule_sequence is not None:
      log_str.write('rule_sequence = ')
      log_str.write(self.rule_sequence)
      log_str.write('  ')
    if self.rule_uuid is not None:
      log_str.write('rule_uuid = ')
      log_str.write(self.rule_uuid)
      log_str.write('  ')
    if self.src_addresses is not None:
      log_str.write('src_addresses = ')
      log_str.write('[ ')
      for iter627 in self.src_addresses:
        log_str.write('<<  ')
        log_str.write(iter627.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.src_ports is not None:
      log_str.write('src_ports = ')
      log_str.write('[ ')
      for iter628 in self.src_ports:
        log_str.write(iter628)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.action_list is not None:
      size += getsizeof(self.action_list)
    if self.application is not None:
      size += getsizeof(self.application)
      size += sum(map(getsizeof, self.application))
    if self.created is not None:
      size += getsizeof(self.created)
    if self.direction is not None:
      size += getsizeof(self.direction)
    if self.dst_addresses is not None:
      size += getsizeof(self.dst_addresses)
      size += sum(map(getsizeof, self.dst_addresses))
    if self.dst_ports is not None:
      size += getsizeof(self.dst_ports)
      size += sum(map(getsizeof, self.dst_ports))
    if self.ethertype is not None:
      size += getsizeof(self.ethertype)
    if self.last_modified is not None:
      size += getsizeof(self.last_modified)
    if self.protocol is not None:
      size += getsizeof(self.protocol)
    if self.rule_sequence is not None:
      size += getsizeof(self.rule_sequence)
    if self.rule_uuid is not None:
      size += getsizeof(self.rule_uuid)
    if self.src_addresses is not None:
      size += getsizeof(self.src_addresses)
      size += sum(map(getsizeof, self.src_addresses))
    if self.src_ports is not None:
      size += getsizeof(self.src_ports)
      size += sum(map(getsizeof, self.src_ports))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SecurityGroupInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - ingress_ns_sgs
   - ingress_pod_selector
   - ingress_pod_sgs
   - namespace_name
   - np_pod_selector
   - np_sgs
   - np_spec
   - owner
   - project_uuid
   - rule_entries
   - vm_interfaces
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'ingress_ns_sgs', (TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'ingress_pod_selector', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'ingress_pod_sgs', (TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'namespace_name', None, None, ), # 8
    (9, TType.MAP, 'np_pod_selector', (TType.STRING,None,TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'np_sgs', (TType.STRING,None), None, ), # 10
    (11, TType.MAP, 'np_spec', (TType.STRING,None,TType.STRING,None), None, ), # 11
    (12, TType.STRING, 'owner', None, None, ), # 12
    (13, TType.STRING, 'project_uuid', None, None, ), # 13
    (14, TType.LIST, 'rule_entries', (TType.STRUCT,(SGRuleEntry, SGRuleEntry.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'vm_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 15
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, ingress_ns_sgs=None, ingress_pod_selector=None, ingress_pod_sgs=None, namespace_name=None, np_pod_selector=None, np_sgs=None, np_spec=None, owner=None, project_uuid=None, rule_entries=None, vm_interfaces=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.ingress_ns_sgs = ingress_ns_sgs
    self.ingress_pod_selector = ingress_pod_selector
    self.ingress_pod_sgs = ingress_pod_sgs
    self.namespace_name = namespace_name
    self.np_pod_selector = np_pod_selector
    self.np_sgs = np_sgs
    self.np_spec = np_spec
    self.owner = owner
    self.project_uuid = project_uuid
    self.rule_entries = rule_entries
    self.vm_interfaces = vm_interfaces

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype632, _size629) = iprot.readListBegin()
          read_cnt += length
          for _i633 in xrange(_size629):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem634) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem634)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype636, _vtype637, _size635 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i639 in xrange(_size635):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key640) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val641) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key640] = _val641
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.ingress_ns_sgs = []
          (length, _etype645, _size642) = iprot.readListBegin()
          read_cnt += length
          for _i646 in xrange(_size642):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem647) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.ingress_ns_sgs.append(_elem647)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.ingress_pod_selector = {}
          (length, _ktype649, _vtype650, _size648 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i652 in xrange(_size648):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key653) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val654) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.ingress_pod_selector[_key653] = _val654
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.ingress_pod_sgs = []
          (length, _etype658, _size655) = iprot.readListBegin()
          read_cnt += length
          for _i659 in xrange(_size655):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem660) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.ingress_pod_sgs.append(_elem660)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          (length, self.namespace_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.np_pod_selector = {}
          (length, _ktype662, _vtype663, _size661 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i665 in xrange(_size661):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key666) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val667) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.np_pod_selector[_key666] = _val667
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.np_sgs = []
          (length, _etype671, _size668) = iprot.readListBegin()
          read_cnt += length
          for _i672 in xrange(_size668):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem673) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.np_sgs.append(_elem673)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.MAP:
          self.np_spec = {}
          (length, _ktype675, _vtype676, _size674 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i678 in xrange(_size674):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key679) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val680) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.np_spec[_key679] = _val680
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          (length, self.owner) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          (length, self.project_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.rule_entries = []
          (length, _etype684, _size681) = iprot.readListBegin()
          read_cnt += length
          for _i685 in xrange(_size681):
            _elem686 = SGRuleEntry()
            read_cnt += _elem686.read(iprot)
            self.rule_entries.append(_elem686)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.vm_interfaces = []
          (length, _etype690, _size687) = iprot.readListBegin()
          read_cnt += length
          for _i691 in xrange(_size687):
            _elem692 = VMIUuid()
            read_cnt += _elem692.read(iprot)
            self.vm_interfaces.append(_elem692)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter693 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter693) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter694,viter695 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter694) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter695) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ingress_ns_sgs is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress_ns_sgs', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.ingress_ns_sgs)) < 0: return -1
      for iter696 in self.ingress_ns_sgs:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter696) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ingress_pod_selector is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress_pod_selector', TType.MAP, 6, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ingress_pod_selector)) < 0: return -1
      for kiter697,viter698 in self.ingress_pod_selector.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter697) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter698) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ingress_pod_sgs is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress_pod_sgs', TType.LIST, 7, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.ingress_pod_sgs)) < 0: return -1
      for iter699 in self.ingress_pod_sgs:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter699) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.namespace_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('namespace_name', TType.STRING, 8, annotations) < 0: return -1
      if oprot.writeString(self.namespace_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.np_pod_selector is not None:
      annotations = {}
      if oprot.writeFieldBegin('np_pod_selector', TType.MAP, 9, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.np_pod_selector)) < 0: return -1
      for kiter700,viter701 in self.np_pod_selector.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter700) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter701) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.np_sgs is not None:
      annotations = {}
      if oprot.writeFieldBegin('np_sgs', TType.LIST, 10, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.np_sgs)) < 0: return -1
      for iter702 in self.np_sgs:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter702) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.np_spec is not None:
      annotations = {}
      if oprot.writeFieldBegin('np_spec', TType.MAP, 11, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.np_spec)) < 0: return -1
      for kiter703,viter704 in self.np_spec.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter703) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter704) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.owner is not None:
      annotations = {}
      if oprot.writeFieldBegin('owner', TType.STRING, 12, annotations) < 0: return -1
      if oprot.writeString(self.owner) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.project_uuid is not None:
      annotations = {}
      annotations['link'] = 'ProjectDatabaseList'
      if oprot.writeFieldBegin('project_uuid', TType.STRING, 13, annotations) < 0: return -1
      if oprot.writeString(self.project_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rule_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('rule_entries', TType.LIST, 14, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.rule_entries)) < 0: return -1
      for iter705 in self.rule_entries:
        if iter705.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vm_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_interfaces', TType.LIST, 15, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vm_interfaces)) < 0: return -1
      for iter706 in self.vm_interfaces:
        if iter706.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter707 in self.fq_name:
        log_str.write(iter707)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter708,viter709 in self.annotations.iteritems():
        log_str.write(kiter708)
        log_str.write(' : ')
        log_str.write(viter709)
      log_str.write(' }')
      log_str.write('  ')
    if self.ingress_ns_sgs is not None:
      log_str.write('ingress_ns_sgs = ')
      log_str.write('[ ')
      for iter710 in self.ingress_ns_sgs:
        log_str.write(iter710)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.ingress_pod_selector is not None:
      log_str.write('ingress_pod_selector = ')
      log_str.write('{ ')
      for kiter711,viter712 in self.ingress_pod_selector.iteritems():
        log_str.write(kiter711)
        log_str.write(' : ')
        log_str.write(viter712)
      log_str.write(' }')
      log_str.write('  ')
    if self.ingress_pod_sgs is not None:
      log_str.write('ingress_pod_sgs = ')
      log_str.write('[ ')
      for iter713 in self.ingress_pod_sgs:
        log_str.write(iter713)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.namespace_name is not None:
      log_str.write('namespace_name = ')
      log_str.write(self.namespace_name)
      log_str.write('  ')
    if self.np_pod_selector is not None:
      log_str.write('np_pod_selector = ')
      log_str.write('{ ')
      for kiter714,viter715 in self.np_pod_selector.iteritems():
        log_str.write(kiter714)
        log_str.write(' : ')
        log_str.write(viter715)
      log_str.write(' }')
      log_str.write('  ')
    if self.np_sgs is not None:
      log_str.write('np_sgs = ')
      log_str.write('[ ')
      for iter716 in self.np_sgs:
        log_str.write(iter716)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.np_spec is not None:
      log_str.write('np_spec = ')
      log_str.write('{ ')
      for kiter717,viter718 in self.np_spec.iteritems():
        log_str.write(kiter717)
        log_str.write(' : ')
        log_str.write(viter718)
      log_str.write(' }')
      log_str.write('  ')
    if self.owner is not None:
      log_str.write('owner = ')
      log_str.write(self.owner)
      log_str.write('  ')
    if self.project_uuid is not None:
      log_str.write('project_uuid = ')
      log_str.write(self.project_uuid)
      log_str.write('  ')
    if self.rule_entries is not None:
      log_str.write('rule_entries = ')
      log_str.write('[ ')
      for iter719 in self.rule_entries:
        log_str.write('<<  ')
        log_str.write(iter719.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.vm_interfaces is not None:
      log_str.write('vm_interfaces = ')
      log_str.write('[ ')
      for iter720 in self.vm_interfaces:
        log_str.write('<<  ')
        log_str.write(iter720.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.ingress_ns_sgs is not None:
      size += getsizeof(self.ingress_ns_sgs)
      size += sum(map(getsizeof, self.ingress_ns_sgs))
    if self.ingress_pod_selector is not None:
      size += getsizeof(self.ingress_pod_selector)
      size += sum(map(getsizeof, chain.from_iterable(self.ingress_pod_selector.iteritems())))
    if self.ingress_pod_sgs is not None:
      size += getsizeof(self.ingress_pod_sgs)
      size += sum(map(getsizeof, self.ingress_pod_sgs))
    if self.namespace_name is not None:
      size += getsizeof(self.namespace_name)
    if self.np_pod_selector is not None:
      size += getsizeof(self.np_pod_selector)
      size += sum(map(getsizeof, chain.from_iterable(self.np_pod_selector.iteritems())))
    if self.np_sgs is not None:
      size += getsizeof(self.np_sgs)
      size += sum(map(getsizeof, self.np_sgs))
    if self.np_spec is not None:
      size += getsizeof(self.np_spec)
      size += sum(map(getsizeof, chain.from_iterable(self.np_spec.iteritems())))
    if self.owner is not None:
      size += getsizeof(self.owner)
    if self.project_uuid is not None:
      size += getsizeof(self.project_uuid)
    if self.rule_entries is not None:
      size += getsizeof(self.rule_entries)
      size += sum(map(getsizeof, self.rule_entries))
    if self.vm_interfaces is not None:
      size += getsizeof(self.vm_interfaces)
      size += sum(map(getsizeof, self.vm_interfaces))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpPoolInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - fip_pool_subnets
   - virtual_network
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'fip_pool_subnets', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'virtual_network', None, None, ), # 6
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, fip_pool_subnets=None, virtual_network=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.fip_pool_subnets = fip_pool_subnets
    self.virtual_network = virtual_network

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype724, _size721) = iprot.readListBegin()
          read_cnt += length
          for _i725 in xrange(_size721):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem726) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem726)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype728, _vtype729, _size727 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i731 in xrange(_size727):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key732) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val733) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key732] = _val733
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.fip_pool_subnets = []
          (length, _etype737, _size734) = iprot.readListBegin()
          read_cnt += length
          for _i738 in xrange(_size734):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem739) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fip_pool_subnets.append(_elem739)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.virtual_network) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter740 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter740) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter741,viter742 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter741) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter742) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fip_pool_subnets is not None:
      annotations = {}
      if oprot.writeFieldBegin('fip_pool_subnets', TType.LIST, 5, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fip_pool_subnets)) < 0: return -1
      for iter743 in self.fip_pool_subnets:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter743) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_network is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_network', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.virtual_network) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter744 in self.fq_name:
        log_str.write(iter744)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter745,viter746 in self.annotations.iteritems():
        log_str.write(kiter745)
        log_str.write(' : ')
        log_str.write(viter746)
      log_str.write(' }')
      log_str.write('  ')
    if self.fip_pool_subnets is not None:
      log_str.write('fip_pool_subnets = ')
      log_str.write('[ ')
      for iter747 in self.fip_pool_subnets:
        log_str.write(iter747)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.virtual_network is not None:
      log_str.write('virtual_network = ')
      log_str.write(self.virtual_network)
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.fip_pool_subnets is not None:
      size += getsizeof(self.fip_pool_subnets)
      size += sum(map(getsizeof, self.fip_pool_subnets))
    if self.virtual_network is not None:
      size += getsizeof(self.virtual_network)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
   - address
   - parent_uuid
   - virtual_ip
   - vm_interfaces
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'address', None, None, ), # 5
    (6, TType.STRING, 'parent_uuid', None, None, ), # 6
    (7, TType.STRING, 'virtual_ip', None, None, ), # 7
    (8, TType.LIST, 'vm_interfaces', (TType.STRUCT,(VMIUuid, VMIUuid.thrift_spec)), None, ), # 8
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None, address=None, parent_uuid=None, virtual_ip=None, vm_interfaces=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations
    self.address = address
    self.parent_uuid = parent_uuid
    self.virtual_ip = virtual_ip
    self.vm_interfaces = vm_interfaces

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype751, _size748) = iprot.readListBegin()
          read_cnt += length
          for _i752 in xrange(_size748):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem753) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem753)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype755, _vtype756, _size754 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i758 in xrange(_size754):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key759) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val760) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key759] = _val760
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          (length, self.address) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          (length, self.parent_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          (length, self.virtual_ip) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.vm_interfaces = []
          (length, _etype764, _size761) = iprot.readListBegin()
          read_cnt += length
          for _i765 in xrange(_size761):
            _elem766 = VMIUuid()
            read_cnt += _elem766.read(iprot)
            self.vm_interfaces.append(_elem766)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter767 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter767) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter768,viter769 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter768) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter769) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.address is not None:
      annotations = {}
      if oprot.writeFieldBegin('address', TType.STRING, 5, annotations) < 0: return -1
      if oprot.writeString(self.address) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.parent_uuid is not None:
      annotations = {}
      annotations['link'] = 'FloatingIpPoolDatabaseList'
      if oprot.writeFieldBegin('parent_uuid', TType.STRING, 6, annotations) < 0: return -1
      if oprot.writeString(self.parent_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.virtual_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('virtual_ip', TType.STRING, 7, annotations) < 0: return -1
      if oprot.writeString(self.virtual_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vm_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_interfaces', TType.LIST, 8, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vm_interfaces)) < 0: return -1
      for iter770 in self.vm_interfaces:
        if iter770.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter771 in self.fq_name:
        log_str.write(iter771)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter772,viter773 in self.annotations.iteritems():
        log_str.write(kiter772)
        log_str.write(' : ')
        log_str.write(viter773)
      log_str.write(' }')
      log_str.write('  ')
    if self.address is not None:
      log_str.write('address = ')
      log_str.write(self.address)
      log_str.write('  ')
    if self.parent_uuid is not None:
      log_str.write('parent_uuid = ')
      log_str.write(self.parent_uuid)
      log_str.write('  ')
    if self.virtual_ip is not None:
      log_str.write('virtual_ip = ')
      log_str.write(self.virtual_ip)
      log_str.write('  ')
    if self.vm_interfaces is not None:
      log_str.write('vm_interfaces = ')
      log_str.write('[ ')
      for iter774 in self.vm_interfaces:
        log_str.write('<<  ')
        log_str.write(iter774.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    if self.address is not None:
      size += getsizeof(self.address)
    if self.parent_uuid is not None:
      size += getsizeof(self.parent_uuid)
    if self.virtual_ip is not None:
      size += getsizeof(self.virtual_ip)
    if self.vm_interfaces is not None:
      size += getsizeof(self.vm_interfaces)
      size += sum(map(getsizeof, self.vm_interfaces))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkIpamInstance(object):
  """
  Attributes:
   - uuid
   - name
   - fq_name
   - annotations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'fq_name', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'annotations', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, uuid=None, name=None, fq_name=None, annotations=None,):
    self.uuid = uuid
    self.name = name
    self.fq_name = fq_name
    self.annotations = annotations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          (length, self.name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fq_name = []
          (length, _etype778, _size775) = iprot.readListBegin()
          read_cnt += length
          for _i779 in xrange(_size775):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem780) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.fq_name.append(_elem780)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.annotations = {}
          (length, _ktype782, _vtype783, _size781 ) = iprot.readMapBegin() 
          read_cnt += length
          for _i785 in xrange(_size781):
            read_cnt += iprot.readContainerElementBegin()
            (length, _key786) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            read_cnt += iprot.readContainerElementBegin()
            (length, _val787) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            read_cnt += iprot.readContainerElementEnd()
            self.annotations[_key786] = _val787
          read_cnt += iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.name is not None:
      annotations = {}
      if oprot.writeFieldBegin('name', TType.STRING, 2, annotations) < 0: return -1
      if oprot.writeString(self.name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fq_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('fq_name', TType.LIST, 3, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.fq_name)) < 0: return -1
      for iter788 in self.fq_name:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter788) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.annotations is not None:
      annotations = {}
      if oprot.writeFieldBegin('annotations', TType.MAP, 4, annotations) < 0: return -1
      if oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.annotations)) < 0: return -1
      for kiter789,viter790 in self.annotations.iteritems():
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(kiter789) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(viter790) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeMapEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.uuid is not None:
      log_str.write('uuid = ')
      log_str.write(self.uuid)
      log_str.write('  ')
    if self.name is not None:
      log_str.write('name = ')
      log_str.write(self.name)
      log_str.write('  ')
    if self.fq_name is not None:
      log_str.write('fq_name = ')
      log_str.write('[ ')
      for iter791 in self.fq_name:
        log_str.write(iter791)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.annotations is not None:
      log_str.write('annotations = ')
      log_str.write('{ ')
      for kiter792,viter793 in self.annotations.iteritems():
        log_str.write(kiter792)
        log_str.write(' : ')
        log_str.write(viter793)
      log_str.write(' }')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.uuid is not None:
      size += getsizeof(self.uuid)
    if self.name is not None:
      size += getsizeof(self.name)
    if self.fq_name is not None:
      size += getsizeof(self.fq_name)
      size += sum(map(getsizeof, self.fq_name))
    if self.annotations is not None:
      size += getsizeof(self.annotations)
      size += sum(map(getsizeof, chain.from_iterable(self.annotations.iteritems())))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeGreenletStackInstance(object):
  """
  Attributes:
   - stack
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'stack', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, stack=None,):
    self.stack = stack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.stack = []
          (length, _etype797, _size794) = iprot.readListBegin()
          read_cnt += length
          for _i798 in xrange(_size794):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem799) = iprot.readString();
            if length < 0: return -1
            read_cnt += length
            self.stack.append(_elem799)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.stack is not None:
      annotations = {}
      if oprot.writeFieldBegin('stack', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRING, len(self.stack)) < 0: return -1
      for iter800 in self.stack:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeString(iter800) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.stack is not None:
      log_str.write('stack = ')
      log_str.write('[ ')
      for iter801 in self.stack:
        log_str.write(iter801)
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.stack is not None:
      size += getsizeof(self.stack)
      size += sum(map(getsizeof, self.stack))
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeApiConnections(object):
  """
  Attributes:
   - endpoint_monitor
   - ingress_monitor
   - namespace_monitor
   - network_policy_monitor
   - pod_monitor
   - service_monitor
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'endpoint_monitor', None, None, ), # 1
    (2, TType.BOOL, 'ingress_monitor', None, None, ), # 2
    (3, TType.BOOL, 'namespace_monitor', None, None, ), # 3
    (4, TType.BOOL, 'network_policy_monitor', None, None, ), # 4
    (5, TType.BOOL, 'pod_monitor', None, None, ), # 5
    (6, TType.BOOL, 'service_monitor', None, None, ), # 6
  )

  def __init__(self, endpoint_monitor=None, ingress_monitor=None, namespace_monitor=None, network_policy_monitor=None, pod_monitor=None, service_monitor=None,):
    self.endpoint_monitor = endpoint_monitor
    self.ingress_monitor = ingress_monitor
    self.namespace_monitor = namespace_monitor
    self.network_policy_monitor = network_policy_monitor
    self.pod_monitor = pod_monitor
    self.service_monitor = service_monitor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          (length, self.endpoint_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          (length, self.ingress_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          (length, self.namespace_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          (length, self.network_policy_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          (length, self.pod_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          (length, self.service_monitor) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin(self.__class__.__name__) < 0: return -1
    if self.endpoint_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('endpoint_monitor', TType.BOOL, 1, annotations) < 0: return -1
      if oprot.writeBool(self.endpoint_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ingress_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress_monitor', TType.BOOL, 2, annotations) < 0: return -1
      if oprot.writeBool(self.ingress_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.namespace_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('namespace_monitor', TType.BOOL, 3, annotations) < 0: return -1
      if oprot.writeBool(self.namespace_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.network_policy_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_policy_monitor', TType.BOOL, 4, annotations) < 0: return -1
      if oprot.writeBool(self.network_policy_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.pod_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('pod_monitor', TType.BOOL, 5, annotations) < 0: return -1
      if oprot.writeBool(self.pod_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.service_monitor is not None:
      annotations = {}
      if oprot.writeFieldBegin('service_monitor', TType.BOOL, 6, annotations) < 0: return -1
      if oprot.writeBool(self.service_monitor) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.endpoint_monitor is not None:
      log_str.write('endpoint_monitor = ')
      if self.endpoint_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.ingress_monitor is not None:
      log_str.write('ingress_monitor = ')
      if self.ingress_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.namespace_monitor is not None:
      log_str.write('namespace_monitor = ')
      if self.namespace_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.network_policy_monitor is not None:
      log_str.write('network_policy_monitor = ')
      if self.network_policy_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.pod_monitor is not None:
      log_str.write('pod_monitor = ')
      if self.pod_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.service_monitor is not None:
      log_str.write('service_monitor = ')
      if self.service_monitor:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def __sizeof__(self):
    size = 0
    if self.endpoint_monitor is not None:
      size += getsizeof(self.endpoint_monitor)
    if self.ingress_monitor is not None:
      size += getsizeof(self.ingress_monitor)
    if self.namespace_monitor is not None:
      size += getsizeof(self.namespace_monitor)
    if self.network_policy_monitor is not None:
      size += getsizeof(self.network_policy_monitor)
    if self.pod_monitor is not None:
      size += getsizeof(self.pod_monitor)
    if self.service_monitor is not None:
      size += getsizeof(self.service_monitor)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PodDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pod_uuid', None, None, ), # 1
  )

  def __init__(self, pod_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.pod_uuid = pod_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = PodDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "PodDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.pod_uuid = str(bottle.request.query.x)
    if bottle.request.query.pod_uuid:
      sandesh_req.pod_uuid = str(bottle.request.query.pod_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "PodDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "PodDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.pod_uuid is not None:
      log_str.write('pod_uuid = ')
      log_str.write(self.pod_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.pod_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.pod_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('pod_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.pod_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.pod_uuid != other.pod_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.pod_uuid is not None:
      size += getsizeof(self.pod_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PodDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'pods', (TType.STRUCT,(PodInstance, PodInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, pods=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.pods = pods
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2965934292
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.pods is not None:
      log_str.write('pods = ')
      log_str.write('[ ')
      for iter802 in self.pods:
        log_str.write('<<  ')
        log_str.write(iter802.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pods = []
          (length, _etype806, _size803) = iprot.readListBegin()
          read_cnt += length
          for _i807 in xrange(_size803):
            _elem808 = PodInstance()
            read_cnt += _elem808.read(iprot)
            self.pods.append(_elem808)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.pods is not None:
      annotations = {}
      if oprot.writeFieldBegin('pods', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.pods)) < 0: return -1
      for iter809 in self.pods:
        if iter809.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.pods != other.pods:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.pods is not None:
      size += getsizeof(self.pods)
      size += sum(map(getsizeof, self.pods))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NamespaceDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'namespace_uuid', None, None, ), # 1
  )

  def __init__(self, namespace_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.namespace_uuid = namespace_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = NamespaceDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "NamespaceDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.namespace_uuid = str(bottle.request.query.x)
    if bottle.request.query.namespace_uuid:
      sandesh_req.namespace_uuid = str(bottle.request.query.namespace_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "NamespaceDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "NamespaceDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.namespace_uuid is not None:
      log_str.write('namespace_uuid = ')
      log_str.write(self.namespace_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.namespace_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.namespace_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('namespace_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.namespace_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.namespace_uuid != other.namespace_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.namespace_uuid is not None:
      size += getsizeof(self.namespace_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NamespaceDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'namespaces', (TType.STRUCT,(NamespaceInstance, NamespaceInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, namespaces=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.namespaces = namespaces
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1715122718
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.namespaces is not None:
      log_str.write('namespaces = ')
      log_str.write('[ ')
      for iter810 in self.namespaces:
        log_str.write('<<  ')
        log_str.write(iter810.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.namespaces = []
          (length, _etype814, _size811) = iprot.readListBegin()
          read_cnt += length
          for _i815 in xrange(_size811):
            _elem816 = NamespaceInstance()
            read_cnt += _elem816.read(iprot)
            self.namespaces.append(_elem816)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.namespaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('namespaces', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.namespaces)) < 0: return -1
      for iter817 in self.namespaces:
        if iter817.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.namespaces != other.namespaces:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.namespaces is not None:
      size += getsizeof(self.namespaces)
      size += sum(map(getsizeof, self.namespaces))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'service_uuid', None, None, ), # 1
  )

  def __init__(self, service_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.service_uuid = service_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = ServiceDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "ServiceDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.service_uuid = str(bottle.request.query.x)
    if bottle.request.query.service_uuid:
      sandesh_req.service_uuid = str(bottle.request.query.service_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "ServiceDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "ServiceDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.service_uuid is not None:
      log_str.write('service_uuid = ')
      log_str.write(self.service_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.service_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.service_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('service_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.service_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.service_uuid != other.service_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.service_uuid is not None:
      size += getsizeof(self.service_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'services', (TType.STRUCT,(ServiceInstance, ServiceInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, services=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.services = services
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2279281079
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.services is not None:
      log_str.write('services = ')
      log_str.write('[ ')
      for iter818 in self.services:
        log_str.write('<<  ')
        log_str.write(iter818.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.services = []
          (length, _etype822, _size819) = iprot.readListBegin()
          read_cnt += length
          for _i823 in xrange(_size819):
            _elem824 = ServiceInstance()
            read_cnt += _elem824.read(iprot)
            self.services.append(_elem824)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.services is not None:
      annotations = {}
      if oprot.writeFieldBegin('services', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.services)) < 0: return -1
      for iter825 in self.services:
        if iter825.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.services != other.services:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.services is not None:
      size += getsizeof(self.services)
      size += sum(map(getsizeof, self.services))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'network_policy_uuid', None, None, ), # 1
  )

  def __init__(self, network_policy_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.network_policy_uuid = network_policy_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = NetworkPolicyDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "NetworkPolicyDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.network_policy_uuid = str(bottle.request.query.x)
    if bottle.request.query.network_policy_uuid:
      sandesh_req.network_policy_uuid = str(bottle.request.query.network_policy_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "NetworkPolicyDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "NetworkPolicyDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.network_policy_uuid is not None:
      log_str.write('network_policy_uuid = ')
      log_str.write(self.network_policy_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.network_policy_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.network_policy_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_policy_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.network_policy_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.network_policy_uuid != other.network_policy_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.network_policy_uuid is not None:
      size += getsizeof(self.network_policy_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkPolicyDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'network_policies', (TType.STRUCT,(NetworkPolicyInstance, NetworkPolicyInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, network_policies=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.network_policies = network_policies
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1668415823
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.network_policies is not None:
      log_str.write('network_policies = ')
      log_str.write('[ ')
      for iter826 in self.network_policies:
        log_str.write('<<  ')
        log_str.write(iter826.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.network_policies = []
          (length, _etype830, _size827) = iprot.readListBegin()
          read_cnt += length
          for _i831 in xrange(_size827):
            _elem832 = NetworkPolicyInstance()
            read_cnt += _elem832.read(iprot)
            self.network_policies.append(_elem832)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.network_policies is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_policies', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.network_policies)) < 0: return -1
      for iter833 in self.network_policies:
        if iter833.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.network_policies != other.network_policies:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.network_policies is not None:
      size += getsizeof(self.network_policies)
      size += sum(map(getsizeof, self.network_policies))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ingress_uuid', None, None, ), # 1
  )

  def __init__(self, ingress_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.ingress_uuid = ingress_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = IngressDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "IngressDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.ingress_uuid = str(bottle.request.query.x)
    if bottle.request.query.ingress_uuid:
      sandesh_req.ingress_uuid = str(bottle.request.query.ingress_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "IngressDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "IngressDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.ingress_uuid is not None:
      log_str.write('ingress_uuid = ')
      log_str.write(self.ingress_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.ingress_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.ingress_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.ingress_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.ingress_uuid != other.ingress_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.ingress_uuid is not None:
      size += getsizeof(self.ingress_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IngressDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'ingress', (TType.STRUCT,(IngressInstance, IngressInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, ingress=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.ingress = ingress
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3440973237
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.ingress is not None:
      log_str.write('ingress = ')
      log_str.write('[ ')
      for iter834 in self.ingress:
        log_str.write('<<  ')
        log_str.write(iter834.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ingress = []
          (length, _etype838, _size835) = iprot.readListBegin()
          read_cnt += length
          for _i839 in xrange(_size835):
            _elem840 = IngressInstance()
            read_cnt += _elem840.read(iprot)
            self.ingress.append(_elem840)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.ingress is not None:
      annotations = {}
      if oprot.writeFieldBegin('ingress', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.ingress)) < 0: return -1
      for iter841 in self.ingress:
        if iter841.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.ingress != other.ingress:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.ingress is not None:
      size += getsizeof(self.ingress)
      size += sum(map(getsizeof, self.ingress))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lb_uuid', None, None, ), # 1
  )

  def __init__(self, lb_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.lb_uuid = lb_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = LoadbalancerDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.lb_uuid = str(bottle.request.query.x)
    if bottle.request.query.lb_uuid:
      sandesh_req.lb_uuid = str(bottle.request.query.lb_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "LoadbalancerDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lb_uuid is not None:
      log_str.write('lb_uuid = ')
      log_str.write(self.lb_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.lb_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.lb_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('lb_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.lb_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.lb_uuid != other.lb_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lb_uuid is not None:
      size += getsizeof(self.lb_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'lbs', (TType.STRUCT,(LoadbalancerInstance, LoadbalancerInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, lbs=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.lbs = lbs
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3256505905
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbs is not None:
      log_str.write('lbs = ')
      log_str.write('[ ')
      for iter842 in self.lbs:
        log_str.write('<<  ')
        log_str.write(iter842.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lbs = []
          (length, _etype846, _size843) = iprot.readListBegin()
          read_cnt += length
          for _i847 in xrange(_size843):
            _elem848 = LoadbalancerInstance()
            read_cnt += _elem848.read(iprot)
            self.lbs.append(_elem848)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.lbs is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbs', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.lbs)) < 0: return -1
      for iter849 in self.lbs:
        if iter849.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.lbs != other.lbs:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbs is not None:
      size += getsizeof(self.lbs)
      size += sum(map(getsizeof, self.lbs))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerListenerDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lbl_uuid', None, None, ), # 1
  )

  def __init__(self, lbl_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.lbl_uuid = lbl_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = LoadbalancerListenerDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerListenerDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.lbl_uuid = str(bottle.request.query.x)
    if bottle.request.query.lbl_uuid:
      sandesh_req.lbl_uuid = str(bottle.request.query.lbl_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerListenerDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "LoadbalancerListenerDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbl_uuid is not None:
      log_str.write('lbl_uuid = ')
      log_str.write(self.lbl_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.lbl_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.lbl_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbl_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.lbl_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.lbl_uuid != other.lbl_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbl_uuid is not None:
      size += getsizeof(self.lbl_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerListenerDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'lbls', (TType.STRUCT,(LoadbalancerListenerInstance, LoadbalancerListenerInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, lbls=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.lbls = lbls
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 699151590
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbls is not None:
      log_str.write('lbls = ')
      log_str.write('[ ')
      for iter850 in self.lbls:
        log_str.write('<<  ')
        log_str.write(iter850.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lbls = []
          (length, _etype854, _size851) = iprot.readListBegin()
          read_cnt += length
          for _i855 in xrange(_size851):
            _elem856 = LoadbalancerListenerInstance()
            read_cnt += _elem856.read(iprot)
            self.lbls.append(_elem856)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.lbls is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbls', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.lbls)) < 0: return -1
      for iter857 in self.lbls:
        if iter857.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.lbls != other.lbls:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbls is not None:
      size += getsizeof(self.lbls)
      size += sum(map(getsizeof, self.lbls))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerPoolDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lbp_uuid', None, None, ), # 1
  )

  def __init__(self, lbp_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.lbp_uuid = lbp_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = LoadbalancerPoolDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerPoolDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.lbp_uuid = str(bottle.request.query.x)
    if bottle.request.query.lbp_uuid:
      sandesh_req.lbp_uuid = str(bottle.request.query.lbp_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerPoolDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "LoadbalancerPoolDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbp_uuid is not None:
      log_str.write('lbp_uuid = ')
      log_str.write(self.lbp_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.lbp_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.lbp_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbp_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.lbp_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.lbp_uuid != other.lbp_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbp_uuid is not None:
      size += getsizeof(self.lbp_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerPoolDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'lbps', (TType.STRUCT,(LoadbalancerPoolInstance, LoadbalancerPoolInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, lbps=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.lbps = lbps
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1267620966
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbps is not None:
      log_str.write('lbps = ')
      log_str.write('[ ')
      for iter858 in self.lbps:
        log_str.write('<<  ')
        log_str.write(iter858.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lbps = []
          (length, _etype862, _size859) = iprot.readListBegin()
          read_cnt += length
          for _i863 in xrange(_size859):
            _elem864 = LoadbalancerPoolInstance()
            read_cnt += _elem864.read(iprot)
            self.lbps.append(_elem864)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.lbps is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbps', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.lbps)) < 0: return -1
      for iter865 in self.lbps:
        if iter865.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.lbps != other.lbps:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbps is not None:
      size += getsizeof(self.lbps)
      size += sum(map(getsizeof, self.lbps))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerMemberDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lbm_uuid', None, None, ), # 1
  )

  def __init__(self, lbm_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.lbm_uuid = lbm_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = LoadbalancerMemberDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerMemberDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.lbm_uuid = str(bottle.request.query.x)
    if bottle.request.query.lbm_uuid:
      sandesh_req.lbm_uuid = str(bottle.request.query.lbm_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "LoadbalancerMemberDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "LoadbalancerMemberDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbm_uuid is not None:
      log_str.write('lbm_uuid = ')
      log_str.write(self.lbm_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.lbm_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.lbm_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbm_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.lbm_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.lbm_uuid != other.lbm_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbm_uuid is not None:
      size += getsizeof(self.lbm_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadbalancerMemberDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'lbms', (TType.STRUCT,(LoadbalancerMemberInstance, LoadbalancerMemberInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, lbms=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.lbms = lbms
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 480615905
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.lbms is not None:
      log_str.write('lbms = ')
      log_str.write('[ ')
      for iter866 in self.lbms:
        log_str.write('<<  ')
        log_str.write(iter866.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lbms = []
          (length, _etype870, _size867) = iprot.readListBegin()
          read_cnt += length
          for _i871 in xrange(_size867):
            _elem872 = LoadbalancerMemberInstance()
            read_cnt += _elem872.read(iprot)
            self.lbms.append(_elem872)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.lbms is not None:
      annotations = {}
      if oprot.writeFieldBegin('lbms', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.lbms)) < 0: return -1
      for iter873 in self.lbms:
        if iter873.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.lbms != other.lbms:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.lbms is not None:
      size += getsizeof(self.lbms)
      size += sum(map(getsizeof, self.lbms))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HealthMonitorDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hm_uuid', None, None, ), # 1
  )

  def __init__(self, hm_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.hm_uuid = hm_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = HealthMonitorDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "HealthMonitorDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.hm_uuid = str(bottle.request.query.x)
    if bottle.request.query.hm_uuid:
      sandesh_req.hm_uuid = str(bottle.request.query.hm_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "HealthMonitorDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "HealthMonitorDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.hm_uuid is not None:
      log_str.write('hm_uuid = ')
      log_str.write(self.hm_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.hm_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.hm_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('hm_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.hm_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.hm_uuid != other.hm_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.hm_uuid is not None:
      size += getsizeof(self.hm_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HealthMonitorDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'hms', (TType.STRUCT,(HealthMonitorInstance, HealthMonitorInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, hms=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.hms = hms
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 480615905
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.hms is not None:
      log_str.write('hms = ')
      log_str.write('[ ')
      for iter874 in self.hms:
        log_str.write('<<  ')
        log_str.write(iter874.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hms = []
          (length, _etype878, _size875) = iprot.readListBegin()
          read_cnt += length
          for _i879 in xrange(_size875):
            _elem880 = HealthMonitorInstance()
            read_cnt += _elem880.read(iprot)
            self.hms.append(_elem880)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.hms is not None:
      annotations = {}
      if oprot.writeFieldBegin('hms', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.hms)) < 0: return -1
      for iter881 in self.hms:
        if iter881.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.hms != other.hms:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.hms is not None:
      size += getsizeof(self.hms)
      size += sum(map(getsizeof, self.hms))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vm_uuid', None, None, ), # 1
  )

  def __init__(self, vm_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.vm_uuid = vm_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = VirtualMachineDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "VirtualMachineDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.vm_uuid = str(bottle.request.query.x)
    if bottle.request.query.vm_uuid:
      sandesh_req.vm_uuid = str(bottle.request.query.vm_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "VirtualMachineDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "VirtualMachineDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vm_uuid is not None:
      log_str.write('vm_uuid = ')
      log_str.write(self.vm_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vm_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.vm_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vm_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vm_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.vm_uuid != other.vm_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vm_uuid is not None:
      size += getsizeof(self.vm_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'vms', (TType.STRUCT,(VirtualMachineInstance, VirtualMachineInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, vms=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.vms = vms
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1308533778
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vms is not None:
      log_str.write('vms = ')
      log_str.write('[ ')
      for iter882 in self.vms:
        log_str.write('<<  ')
        log_str.write(iter882.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vms = []
          (length, _etype886, _size883) = iprot.readListBegin()
          read_cnt += length
          for _i887 in xrange(_size883):
            _elem888 = VirtualMachineInstance()
            read_cnt += _elem888.read(iprot)
            self.vms.append(_elem888)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vms is not None:
      annotations = {}
      if oprot.writeFieldBegin('vms', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vms)) < 0: return -1
      for iter889 in self.vms:
        if iter889.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.vms != other.vms:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vms is not None:
      size += getsizeof(self.vms)
      size += sum(map(getsizeof, self.vms))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualRouterDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vr_uuid', None, None, ), # 1
  )

  def __init__(self, vr_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.vr_uuid = vr_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = VirtualRouterDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "VirtualRouterDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.vr_uuid = str(bottle.request.query.x)
    if bottle.request.query.vr_uuid:
      sandesh_req.vr_uuid = str(bottle.request.query.vr_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "VirtualRouterDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "VirtualRouterDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vr_uuid is not None:
      log_str.write('vr_uuid = ')
      log_str.write(self.vr_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vr_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.vr_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vr_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vr_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.vr_uuid != other.vr_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vr_uuid is not None:
      size += getsizeof(self.vr_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualRouterDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'vrs', (TType.STRUCT,(VirtualRouterInstance, VirtualRouterInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, vrs=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.vrs = vrs
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 797605776
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vrs is not None:
      log_str.write('vrs = ')
      log_str.write('[ ')
      for iter890 in self.vrs:
        log_str.write('<<  ')
        log_str.write(iter890.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vrs = []
          (length, _etype894, _size891) = iprot.readListBegin()
          read_cnt += length
          for _i895 in xrange(_size891):
            _elem896 = VirtualRouterInstance()
            read_cnt += _elem896.read(iprot)
            self.vrs.append(_elem896)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vrs is not None:
      annotations = {}
      if oprot.writeFieldBegin('vrs', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vrs)) < 0: return -1
      for iter897 in self.vrs:
        if iter897.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.vrs != other.vrs:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vrs is not None:
      size += getsizeof(self.vrs)
      size += sum(map(getsizeof, self.vrs))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineInterfaceDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vmi_uuid', None, None, ), # 1
  )

  def __init__(self, vmi_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.vmi_uuid = vmi_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = VirtualMachineInterfaceDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "VirtualMachineInterfaceDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.vmi_uuid = str(bottle.request.query.x)
    if bottle.request.query.vmi_uuid:
      sandesh_req.vmi_uuid = str(bottle.request.query.vmi_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "VirtualMachineInterfaceDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "VirtualMachineInterfaceDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vmi_uuid is not None:
      log_str.write('vmi_uuid = ')
      log_str.write(self.vmi_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vmi_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.vmi_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vmi_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vmi_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.vmi_uuid != other.vmi_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vmi_uuid is not None:
      size += getsizeof(self.vmi_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualMachineInterfaceDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'vmis', (TType.STRUCT,(VirtualMachineInterfaceInstance, VirtualMachineInterfaceInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, vmis=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.vmis = vmis
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 336831330
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vmis is not None:
      log_str.write('vmis = ')
      log_str.write('[ ')
      for iter898 in self.vmis:
        log_str.write('<<  ')
        log_str.write(iter898.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vmis = []
          (length, _etype902, _size899) = iprot.readListBegin()
          read_cnt += length
          for _i903 in xrange(_size899):
            _elem904 = VirtualMachineInterfaceInstance()
            read_cnt += _elem904.read(iprot)
            self.vmis.append(_elem904)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vmis is not None:
      annotations = {}
      if oprot.writeFieldBegin('vmis', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vmis)) < 0: return -1
      for iter905 in self.vmis:
        if iter905.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.vmis != other.vmis:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vmis is not None:
      size += getsizeof(self.vmis)
      size += sum(map(getsizeof, self.vmis))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualNetworkDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'vn_uuid', None, None, ), # 1
  )

  def __init__(self, vn_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.vn_uuid = vn_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = VirtualNetworkDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "VirtualNetworkDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.vn_uuid = str(bottle.request.query.x)
    if bottle.request.query.vn_uuid:
      sandesh_req.vn_uuid = str(bottle.request.query.vn_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "VirtualNetworkDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "VirtualNetworkDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vn_uuid is not None:
      log_str.write('vn_uuid = ')
      log_str.write(self.vn_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.vn_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.vn_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vn_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.vn_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.vn_uuid != other.vn_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vn_uuid is not None:
      size += getsizeof(self.vn_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VirtualNetworkDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'vns', (TType.STRUCT,(VirtualNetworkInstance, VirtualNetworkInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, vns=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.vns = vns
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 678750160
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.vns is not None:
      log_str.write('vns = ')
      log_str.write('[ ')
      for iter906 in self.vns:
        log_str.write('<<  ')
        log_str.write(iter906.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vns = []
          (length, _etype910, _size907) = iprot.readListBegin()
          read_cnt += length
          for _i911 in xrange(_size907):
            _elem912 = VirtualNetworkInstance()
            read_cnt += _elem912.read(iprot)
            self.vns.append(_elem912)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vns is not None:
      annotations = {}
      if oprot.writeFieldBegin('vns', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.vns)) < 0: return -1
      for iter913 in self.vns:
        if iter913.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.vns != other.vns:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.vns is not None:
      size += getsizeof(self.vns)
      size += sum(map(getsizeof, self.vns))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceIpDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'iip_uuid', None, None, ), # 1
  )

  def __init__(self, iip_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.iip_uuid = iip_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = InstanceIpDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "InstanceIpDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.iip_uuid = str(bottle.request.query.x)
    if bottle.request.query.iip_uuid:
      sandesh_req.iip_uuid = str(bottle.request.query.iip_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "InstanceIpDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "InstanceIpDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.iip_uuid is not None:
      log_str.write('iip_uuid = ')
      log_str.write(self.iip_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.iip_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.iip_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('iip_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.iip_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.iip_uuid != other.iip_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.iip_uuid is not None:
      size += getsizeof(self.iip_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceIpDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'iips', (TType.STRUCT,(InstanceIpInstance, InstanceIpInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, iips=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.iips = iips
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3218993844
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.iips is not None:
      log_str.write('iips = ')
      log_str.write('[ ')
      for iter914 in self.iips:
        log_str.write('<<  ')
        log_str.write(iter914.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.iips = []
          (length, _etype918, _size915) = iprot.readListBegin()
          read_cnt += length
          for _i919 in xrange(_size915):
            _elem920 = InstanceIpInstance()
            read_cnt += _elem920.read(iprot)
            self.iips.append(_elem920)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.iips is not None:
      annotations = {}
      if oprot.writeFieldBegin('iips', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.iips)) < 0: return -1
      for iter921 in self.iips:
        if iter921.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.iips != other.iips:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.iips is not None:
      size += getsizeof(self.iips)
      size += sum(map(getsizeof, self.iips))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProjectDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'project_uuid', None, None, ), # 1
  )

  def __init__(self, project_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.project_uuid = project_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = ProjectDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "ProjectDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.project_uuid = str(bottle.request.query.x)
    if bottle.request.query.project_uuid:
      sandesh_req.project_uuid = str(bottle.request.query.project_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "ProjectDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "ProjectDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.project_uuid is not None:
      log_str.write('project_uuid = ')
      log_str.write(self.project_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.project_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.project_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('project_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.project_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.project_uuid != other.project_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.project_uuid is not None:
      size += getsizeof(self.project_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProjectDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'projects', (TType.STRUCT,(ProjectInstance, ProjectInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, projects=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.projects = projects
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1451888187
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.projects is not None:
      log_str.write('projects = ')
      log_str.write('[ ')
      for iter922 in self.projects:
        log_str.write('<<  ')
        log_str.write(iter922.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.projects = []
          (length, _etype926, _size923) = iprot.readListBegin()
          read_cnt += length
          for _i927 in xrange(_size923):
            _elem928 = ProjectInstance()
            read_cnt += _elem928.read(iprot)
            self.projects.append(_elem928)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.projects is not None:
      annotations = {}
      if oprot.writeFieldBegin('projects', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.projects)) < 0: return -1
      for iter929 in self.projects:
        if iter929.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.projects != other.projects:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.projects is not None:
      size += getsizeof(self.projects)
      size += sum(map(getsizeof, self.projects))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DomainDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'domain_uuid', None, None, ), # 1
  )

  def __init__(self, domain_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.domain_uuid = domain_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = DomainDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "DomainDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.domain_uuid = str(bottle.request.query.x)
    if bottle.request.query.domain_uuid:
      sandesh_req.domain_uuid = str(bottle.request.query.domain_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "DomainDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "DomainDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.domain_uuid is not None:
      log_str.write('domain_uuid = ')
      log_str.write(self.domain_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.domain_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.domain_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('domain_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.domain_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.domain_uuid != other.domain_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.domain_uuid is not None:
      size += getsizeof(self.domain_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DomainDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'domains', (TType.STRUCT,(DomainInstance, DomainInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, domains=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.domains = domains
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 480615905
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.domains is not None:
      log_str.write('domains = ')
      log_str.write('[ ')
      for iter930 in self.domains:
        log_str.write('<<  ')
        log_str.write(iter930.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.domains = []
          (length, _etype934, _size931) = iprot.readListBegin()
          read_cnt += length
          for _i935 in xrange(_size931):
            _elem936 = DomainInstance()
            read_cnt += _elem936.read(iprot)
            self.domains.append(_elem936)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.domains is not None:
      annotations = {}
      if oprot.writeFieldBegin('domains', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.domains)) < 0: return -1
      for iter937 in self.domains:
        if iter937.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.domains != other.domains:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.domains is not None:
      size += getsizeof(self.domains)
      size += sum(map(getsizeof, self.domains))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SecurityGroupDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sg_uuid', None, None, ), # 1
  )

  def __init__(self, sg_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.sg_uuid = sg_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = SecurityGroupDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "SecurityGroupDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.sg_uuid = str(bottle.request.query.x)
    if bottle.request.query.sg_uuid:
      sandesh_req.sg_uuid = str(bottle.request.query.sg_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "SecurityGroupDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "SecurityGroupDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.sg_uuid is not None:
      log_str.write('sg_uuid = ')
      log_str.write(self.sg_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.sg_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.sg_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('sg_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.sg_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.sg_uuid != other.sg_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.sg_uuid is not None:
      size += getsizeof(self.sg_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SecurityGroupDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'sgs', (TType.STRUCT,(SecurityGroupInstance, SecurityGroupInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, sgs=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.sgs = sgs
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2264256410
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.sgs is not None:
      log_str.write('sgs = ')
      log_str.write('[ ')
      for iter938 in self.sgs:
        log_str.write('<<  ')
        log_str.write(iter938.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sgs = []
          (length, _etype942, _size939) = iprot.readListBegin()
          read_cnt += length
          for _i943 in xrange(_size939):
            _elem944 = SecurityGroupInstance()
            read_cnt += _elem944.read(iprot)
            self.sgs.append(_elem944)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.sgs is not None:
      annotations = {}
      if oprot.writeFieldBegin('sgs', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.sgs)) < 0: return -1
      for iter945 in self.sgs:
        if iter945.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.sgs != other.sgs:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.sgs is not None:
      size += getsizeof(self.sgs)
      size += sum(map(getsizeof, self.sgs))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpPoolDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fip_pool_uuid', None, None, ), # 1
  )

  def __init__(self, fip_pool_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.fip_pool_uuid = fip_pool_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = FloatingIpPoolDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "FloatingIpPoolDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.fip_pool_uuid = str(bottle.request.query.x)
    if bottle.request.query.fip_pool_uuid:
      sandesh_req.fip_pool_uuid = str(bottle.request.query.fip_pool_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "FloatingIpPoolDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "FloatingIpPoolDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.fip_pool_uuid is not None:
      log_str.write('fip_pool_uuid = ')
      log_str.write(self.fip_pool_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.fip_pool_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.fip_pool_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('fip_pool_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.fip_pool_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.fip_pool_uuid != other.fip_pool_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.fip_pool_uuid is not None:
      size += getsizeof(self.fip_pool_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpPoolDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'fip_pools', (TType.STRUCT,(FloatingIpPoolInstance, FloatingIpPoolInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, fip_pools=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.fip_pools = fip_pools
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 309476345
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.fip_pools is not None:
      log_str.write('fip_pools = ')
      log_str.write('[ ')
      for iter946 in self.fip_pools:
        log_str.write('<<  ')
        log_str.write(iter946.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fip_pools = []
          (length, _etype950, _size947) = iprot.readListBegin()
          read_cnt += length
          for _i951 in xrange(_size947):
            _elem952 = FloatingIpPoolInstance()
            read_cnt += _elem952.read(iprot)
            self.fip_pools.append(_elem952)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fip_pools is not None:
      annotations = {}
      if oprot.writeFieldBegin('fip_pools', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.fip_pools)) < 0: return -1
      for iter953 in self.fip_pools:
        if iter953.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.fip_pools != other.fip_pools:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.fip_pools is not None:
      size += getsizeof(self.fip_pools)
      size += sum(map(getsizeof, self.fip_pools))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fip_uuid', None, None, ), # 1
  )

  def __init__(self, fip_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.fip_uuid = fip_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = FloatingIpDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "FloatingIpDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.fip_uuid = str(bottle.request.query.x)
    if bottle.request.query.fip_uuid:
      sandesh_req.fip_uuid = str(bottle.request.query.fip_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "FloatingIpDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "FloatingIpDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.fip_uuid is not None:
      log_str.write('fip_uuid = ')
      log_str.write(self.fip_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.fip_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.fip_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('fip_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.fip_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.fip_uuid != other.fip_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.fip_uuid is not None:
      size += getsizeof(self.fip_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FloatingIpDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'fips', (TType.STRUCT,(FloatingIpInstance, FloatingIpInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, fips=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.fips = fips
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2062572043
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.fips is not None:
      log_str.write('fips = ')
      log_str.write('[ ')
      for iter954 in self.fips:
        log_str.write('<<  ')
        log_str.write(iter954.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fips = []
          (length, _etype958, _size955) = iprot.readListBegin()
          read_cnt += length
          for _i959 in xrange(_size955):
            _elem960 = FloatingIpInstance()
            read_cnt += _elem960.read(iprot)
            self.fips.append(_elem960)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fips is not None:
      annotations = {}
      if oprot.writeFieldBegin('fips', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.fips)) < 0: return -1
      for iter961 in self.fips:
        if iter961.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.fips != other.fips:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.fips is not None:
      size += getsizeof(self.fips)
      size += sum(map(getsizeof, self.fips))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkIpamDatabaseList(sandesh_base.SandeshRequest):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'network_ipam_uuid', None, None, ), # 1
  )

  def __init__(self, network_ipam_uuid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self.network_ipam_uuid = network_ipam_uuid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1495906799
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = NetworkIpamDatabaseList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "NetworkIpamDatabaseList" not implemented')
    if bottle.request.query.x:
      sandesh_req.network_ipam_uuid = str(bottle.request.query.x)
    if bottle.request.query.network_ipam_uuid:
      sandesh_req.network_ipam_uuid = str(bottle.request.query.network_ipam_uuid)
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "NetworkIpamDatabaseList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "NetworkIpamDatabaseList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.network_ipam_uuid is not None:
      log_str.write('network_ipam_uuid = ')
      log_str.write(self.network_ipam_uuid)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          (length, self.network_ipam_uuid) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.network_ipam_uuid is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_ipam_uuid', TType.STRING, 1, annotations) < 0: return -1
      if oprot.writeString(self.network_ipam_uuid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.network_ipam_uuid != other.network_ipam_uuid:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.network_ipam_uuid is not None:
      size += getsizeof(self.network_ipam_uuid)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkIpamDatabaseListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'network_ipams', (TType.STRUCT,(NetworkIpamInstance, NetworkIpamInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, network_ipams=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.network_ipams = network_ipams
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 480615905
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.network_ipams is not None:
      log_str.write('network_ipams = ')
      log_str.write('[ ')
      for iter962 in self.network_ipams:
        log_str.write('<<  ')
        log_str.write(iter962.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.network_ipams = []
          (length, _etype966, _size963) = iprot.readListBegin()
          read_cnt += length
          for _i967 in xrange(_size963):
            _elem968 = NetworkIpamInstance()
            read_cnt += _elem968.read(iprot)
            self.network_ipams.append(_elem968)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.network_ipams is not None:
      annotations = {}
      if oprot.writeFieldBegin('network_ipams', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.network_ipams)) < 0: return -1
      for iter969 in self.network_ipams:
        if iter969.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.network_ipams != other.network_ipams:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.network_ipams is not None:
      size += getsizeof(self.network_ipams)
      size += sum(map(getsizeof, self.network_ipams))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeGreenletStackList(sandesh_base.SandeshRequest):

  thrift_spec = (
  )

  def __init__(self, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2471203225
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = KubeGreenletStackList()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "KubeGreenletStackList" not implemented')
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "KubeGreenletStackList" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "KubeGreenletStackList"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    return True

  def __sizeof__(self):
    size = 0
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeGreenletStackListResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.LIST, 'greenlets', (TType.STRUCT,(KubeGreenletStackInstance, KubeGreenletStackInstance.thrift_spec)), None, ), # 1
  )

  def __init__(self, greenlets=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.greenlets = greenlets
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1763981658
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.greenlets is not None:
      log_str.write('greenlets = ')
      log_str.write('[ ')
      for iter970 in self.greenlets:
        log_str.write('<<  ')
        log_str.write(iter970.log())
        log_str.write('>>')
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.greenlets = []
          (length, _etype974, _size971) = iprot.readListBegin()
          read_cnt += length
          for _i975 in xrange(_size971):
            _elem976 = KubeGreenletStackInstance()
            read_cnt += _elem976.read(iprot)
            self.greenlets.append(_elem976)
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.greenlets is not None:
      annotations = {}
      if oprot.writeFieldBegin('greenlets', TType.LIST, 1, annotations) < 0: return -1
      if oprot.writeListBegin(TType.STRUCT, len(self.greenlets)) < 0: return -1
      for iter977 in self.greenlets:
        if iter977.write(oprot) < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.greenlets != other.greenlets:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.greenlets is not None:
      size += getsizeof(self.greenlets)
      size += sum(map(getsizeof, self.greenlets))
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeApiConnectionStatus(sandesh_base.SandeshRequest):

  thrift_spec = (
  )

  def __init__(self, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2471203225
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = KubeApiConnectionStatus()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "KubeApiConnectionStatus" not implemented')
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "KubeApiConnectionStatus" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "KubeApiConnectionStatus"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    return True

  def __sizeof__(self):
    size = 0
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KubeApiConnectionStatusResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.STRUCT, 'connections', (KubeApiConnections, KubeApiConnections.thrift_spec), None, ), # 1
  )

  def __init__(self, connections=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.connections = connections
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 4149115225
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.connections is not None:
      log_str.write('connections = ')
      log_str.write('<<  ')
      log_str.write(self.connections.log())
      log_str.write('>>')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.connections = KubeApiConnections()
          read_cnt += self.connections.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.connections is not None:
      annotations = {}
      if oprot.writeFieldBegin('connections', TType.STRUCT, 1, annotations) < 0: return -1
      if self.connections.write(oprot) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.connections != other.connections:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.connections is not None:
      size += getsizeof(self.connections)
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MastershipStatus(sandesh_base.SandeshRequest):

  thrift_spec = (
  )

  def __init__(self, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshRequest.__init__(self)
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2471203225
    self._hints = 0

  @staticmethod
  def handle_http_request(sandesh=sandesh_base.sandesh_global):
    sandesh_req = MastershipStatus()
    if not sandesh_req:
      return SandeshHttp.http_error('Sandesh Request "MastershipStatus" not implemented')
    sandesh_req._context = bottle.request.url
    handle_req_fn = getattr(sandesh_req, "handle_request", None)
    if callable(handle_req_fn):
      handle_req_fn(sandesh_req)
    else:
      return SandeshHttp.http_error('Sandesh Request "MastershipStatus" not implemented')
    resp = SandeshHttp.get_http_response()
    if resp:
      return resp
    else:
      return SandeshHttp.http_error('No Response for Sandesh Request "MastershipStatus"')
    
  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    return True

  def __sizeof__(self):
    size = 0
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MastershipStatusResp(sandesh_base.SandeshResponse):

  thrift_spec = (
    (0, TType.BOOL, 'more', None, None, ), # 0
    (1, TType.BOOL, 'is_master', None, None, ), # 1
  )

  def __init__(self, is_master=None, more=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshResponse.__init__(self)
    self.is_master = is_master
    self.more = more
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 4224038448
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write(self.__class__.__name__ + ': ')
    if self.is_master is not None:
      log_str.write('is_master = ')
      if self.is_master:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    if self.more is not None:
      log_str.write('more = ')
      if self.more:
        log_str.write('True')
      else:
        log_str.write('False')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          (length, self.is_master) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 0:
        if ftype == TType.BOOL:
          (length, self.more) = iprot.readBool();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin(self.__class__.__name__) < 0: return -1
    if self.more is not None:
      annotations = {}
      if oprot.writeFieldBegin('more', TType.BOOL, 0, annotations) < 0: return -1
      if oprot.writeBool(self.more) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.is_master is not None:
      annotations = {}
      if oprot.writeFieldBegin('is_master', TType.BOOL, 1, annotations) < 0: return -1
      if oprot.writeBool(self.is_master) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.more != other.more:
      return False
    if self.is_master != other.is_master:
      return False
    return True

  def __sizeof__(self):
    size = 0
    if self.is_master is not None:
      size += getsizeof(self.is_master)
    if self.more is not None:
      size += getsizeof(self.more)
    return size

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


_SANDESH_REQUEST_LIST = [
PodDatabaseList,
NamespaceDatabaseList,
ServiceDatabaseList,
NetworkPolicyDatabaseList,
IngressDatabaseList,
LoadbalancerDatabaseList,
LoadbalancerListenerDatabaseList,
LoadbalancerPoolDatabaseList,
LoadbalancerMemberDatabaseList,
HealthMonitorDatabaseList,
VirtualMachineDatabaseList,
VirtualRouterDatabaseList,
VirtualMachineInterfaceDatabaseList,
VirtualNetworkDatabaseList,
InstanceIpDatabaseList,
ProjectDatabaseList,
DomainDatabaseList,
SecurityGroupDatabaseList,
FloatingIpPoolDatabaseList,
FloatingIpDatabaseList,
NetworkIpamDatabaseList,
KubeGreenletStackList,
KubeApiConnectionStatus,
MastershipStatus,
]


_SANDESH_UVE_LIST = [
]


_SANDESH_ALARM_LIST = [
]
